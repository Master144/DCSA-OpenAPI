openapi: 3.0.0
x-stoplight:
  id: 06c2d014dbdea
info:
  version: 2.0.0-Beta-1
  title: DCSA OpenAPI specification for Booking Notifications
  description: |
    API specification issued by DCSA.org.
    
    Booking Notifications for [DCSA OpenAPI specification for Booking](https://app.swaggerhub.com/apis/dcsaorg/DCSA_BKG/2.0.0-Beta-1) is a lightweight notification based on [CloudEvents](https://cloudevents.io/). The POST endPoint of the consumer is called whenever a Booking that is being subscribed to changes state.
    
    Setting up the notification is done outside scope of this API.
    
    For a changelog please click [here](https://github.com/dcsaorg/DCSA-OpenAPI/tree/master/bkg/notification/v2#v200B1). Please also [create a GitHub issue](https://github.com/dcsaorg/DCSA-OpenAPI/issues/new) if you have any questions/comments.
  contact:
    name: Digital Container Shipping Association (DCSA)
    url: https://dcsa.org
    email: info@dcsa.org
tags:
  - name: Notifications
    description: Notification operations
servers:
  - url: 'http://localhost:3000'
paths:
  /v1/booking-notifications:
    post:
      tags:
       - Notifications
      summary: 'Send a new Booking Notification'
      operationId: post-v1-booking-notifications
      description: |
        Send a new Booking Notification
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookingNotification'
      responses:
        '204':
          description: No Content
      servers:
        - url: 'http://localhost:3000'
      x-stoplight:
        id: 8qnfcuf7ka477
components:
  schemas:
    BookingNotification:
      type: object
      title: BookingNotification
      properties:
        specversion:
          type: string
          description: |
            The version of the CloudEvents specification which the event uses. This enables the interpretation of the context. Compliant event producers MUST use a value of `1.0` when referring to this version of the specification.

            Currently, this attribute will only have the 'major' and 'minor' version numbers included in it. This allows for 'patch' changes to the specification to be made without changing this property's value in the serialization. Note: for 'release candidate' releases a suffix might be used for testing purposes.
          enum:
            - '1.0'
          example: '1.0'
        id:
          type: string
          maxLength: 100
          description: |
            Identifies the event. Producers MUST ensure that `source` + `id` is unique for each distinct event. If a duplicate event is re-sent (e.g. due to a network error) it MAY have the same `id`. Consumers MAY assume that Events with identical `source` and `id` are duplicates.
          example: 3cecb101-7a1a-43a4-9d62-e88a131651e2
        source:
          type: string
          maxLength: 4096
          description: |
            Identifies the context in which an event happened. Often this will include information such as the type of the event source, the organization publishing the event or the process that produced the event. The exact syntax and semantics behind the data encoded in the URI is defined by the event producer.

            Producers MUST ensure that `source` + `id` is unique for each distinct event.

            An application MAY assign a unique `source` to each distinct producer, which makes it easy to produce unique IDs since no other producer will have the same source. The application MAY use UUIDs, URNs, DNS authorities or an application-specific scheme to create unique `source` identifiers.

            A source MAY include more than one producer. In that case the producers MUST collaborate to ensure that `source` + `id` is unique for each distinct event.
          example: 'https://member.com/'
        type:
          type: string
          description: |
            This attribute contains a value describing the type of event related to the originating occurrence. Often this attribute is used for routing, observability, policy enforcement, etc. The format of this is producer defined and might include information such as the version of the type - see [Versioning of CloudEvents in the Primer](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/primer.md#versioning-of-cloudevents) for more information.
          enum:
            - org.dcsa.bookingnotification.v2
          example: org.dcsa.bookingnotification.v2
        time:
          type: string
          format: date-time
          description: |
            Timestamp of when the occurrence happened. If the time of the occurrence cannot be determined then this attribute MAY be set to some other time (such as the current time) by the CloudEvents producer, however all producers for the same `source` MUST be consistent in this respect. In other words, either they all use the actual time of the occurrence or they all use the same algorithm to determine the value used.
          example: '2018-04-05T17:31:00Z'
        datacontenttype:
          type: string
          description: |
            Content type of `data` value. This attribute enables `data` to carry any type of content, whereby format and encoding might differ from that of the chosen event format. For example, an event rendered using the [JSON envelope](formats/json-format.md#3-envelope) format might carry an XML payload in `data`, and the consumer is informed by this attribute being set to "application/xml". The rules for how `data` content is rendered for different `datacontenttype` values are defined in the event format specifications; for example, the JSON event format defines the relationship in [section 3.1](formats/json-format.md#31-handling-of-data).

            For some binary mode protocol bindings, this field is directly mapped to the respective protocol's content-type metadata property. Normative rules for the binary mode and the content-type metadata mapping can be found in the respective protocol.

            In some event formats the `datacontenttype` attribute MAY be omitted. For example, if a JSON format event has no `datacontenttype` attribute, then it is implied that the `data` is a JSON value conforming to the "application/json" media type. In other words: a JSON-format event with no `datacontenttype` is exactly equivalent to one with `datacontenttype="application/json"`.

            When translating an event message with no `datacontenttype` attribute to a different format or protocol binding, the target `datacontenttype` SHOULD be set explicitly to the implied `datacontenttype` of the source.
          enum:
          - application/json
          example: application/json
        data:
          type: object
          properties:
            bookingStatus:
              type: string
              maxLength: 50
              description: |
                The status of the booking. Possible values are:
                - `RECEIVED` (Booking request has been received)
                - `PENDING UPDATE` (An update is required to the booking)
                - `PENDING UPDATE CONFIRMATION` (An update is waiting to be Confirmed)
                - `CONFIRMED` (Booking has been Confirmed)
                - `REJECTED` (Booking discontinued before it has been Confirmed)
                - `DECLINED` (Booking discontinued after it has been Confirmed)
                - `CANCELLED` (Booking discontinued by consumer)
                - `COMPLETED` (Transport Document booking is connected to has been Issued)

                More details can be found on [GitHub](https://github.com/dcsaorg/DCSA-Edocumentation/blob/master/edocumentation-domain/src/main/resources/validations/bookingstatuses.csv).
              example: 'RECEIVED'
            amendedBookingStatus:
              type: string
              maxLength: 50
              description: |
                The status of latest amendment added to the booking. If no amendment has been requested - then this field is empty. Possible values are:
                - `PENDING AMENDMENT APPROVAL` (An amendment is waiting to be Approved)
                - `CONFIRMED` (Amendment is confirmed)
                - `DECLINED` (Amendment discontinued by provider)
                - `CANCELLED` (Amendment discontinued by consumer)

                More details can be found on [GitHub](https://github.com/dcsaorg/DCSA-Edocumentation/blob/master/edocumentation-domain/src/main/resources/validations/bookingstatuses.csv).
              example: 'PENDING AMENDMENT APPROVAL'
            carrierBookingRequestReference:
              type: string
              pattern: '^\S+(\s+\S+)*$'
              maxLength: 100
              description: |
                A reference to the booking during the booking request phase.

                **Conditional:** `carrierBookingRequestReference` and/or `carrierBookingReference` is required to provide
              example: '24595eb0-5cfc-4381-9c3a-cedc1975e9aa'
            carrierBookingReference:
              type: string
              pattern: '^\S+(\s+\S+)*$'
              maxLength: 35
              description: |
                The `carrierBookingReference` if know. Often this will not be known until the booking has been confirmed. Is available during a booking amendment.

                **Conditional:** `carrierBookingRequestReference` and/or `carrierBookingReference` is required to provide
              example: 'ABC709951'
            reason:
              type: string
              maxLength: 5000
              description: |
                This field can be used to explain bookingStatus.
              example: 'Rejected because of strike...'
          required:
            - bookingStatus
      required:
        - specversion
        - id
        - source
        - type
        - time
      x-stoplight:
        id: okd2c3sti7b4k
