openapi: 3.0.3
info:
  version: 2.0.0-Beta-1
  title: DCSA OpenAPI specification for Booking
  description: |
    API specification issued by DCSA.org.
    
    For explanation to specific values or objects please refer to the [Information Model 2023.Q3](https://dcsa.org/wp-content/uploads/2022/02/DCSA-Information-Model-2023.Q1.pdf) *** _Will be updated_ ***. This API does not define the business rules regarding what is allowed to update at what time. For this the [Booking IFS]() *** _Will be updated_ *** should be consulted.

    All other documents related to the Booking publication can be found [here](https://knowledge.dcsa.org/s/publication?publicationId=a0r7T000000L8mmQAC)
    
    It is possible to use this API as a standalone API. In order to do so it is necessary to use the poll-endPoint
    - /v2/events
    
    in order to poll event information.

    It is recomended to implement the [DCSA Documentation Event Hub](https://app.swaggerhub.com/apis/dcsaorg/DOCUMENTATION_EVENT_HUB) in order to use the push model. Here events are pushed as they occur.

    For a changelog please click [here](https://github.com/dcsaorg/DCSA-OpenAPI/tree/master/bkg/v2#v200B1). Please also [create a GitHub issue](https://github.com/dcsaorg/DCSA-OpenAPI/issues/new) if you have any questions/comments.

  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  contact:
    name: Digital Container Shipping Association (DCSA)
    url: https://dcsa.org
    email: info@dcsa.org
security: []
tags:
  - name: Booking Request
    description: |
      The initial steps by the Shipper to create a Booking
  - name: Shipment
    description: |
      The shipment as agreed by both parties
  - name: Cancellation
    description: |
      Shipper initiated cancellation of a booking
  - name: Booking Events
    description: |
      If no subscriptions have been setup, event polling can be done here
paths:
  /v2/booking-summaries:
    get:
      tags:
       - Booking Request
      summary: Get booking requests
      operationId: 'getBookingSummeries'
      description: |
        Retrieves the booking request _metadata_

        If not specified - this list will be sorted by the time the `Booking Request` was created (bookingRequestDateTime) in ascending (ASC) order.
      parameters:
        - $ref: '#/components/parameters/bookingStatus'

        # - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.0.0#/components/parameters/cursor'
        # - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.0.0#/components/parameters/offset'
        - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.0.0#/components/parameters/limit'
        - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.0.0#/components/parameters/sort'
        - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.0.0#/components/parameters/Api-Version-Major'
      responses:
        '200':
          description: Request successful
          headers:
            API-Version:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.0.0#/components/headers/API-Version'
            Current-Page:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.0.0#/components/headers/Current-Page'
            Next-Page:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.0.0#/components/headers/Next-Page'
            Prev-Page:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.0.0#/components/headers/Prev-Page'
            Last-Page:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.0.0#/components/headers/Last-Page'
            First-Page:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.0.0#/components/headers/First-Page'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DOCUMENTATION_DOMAIN/3.0.0#/components/schemas/bookingSummary'
        default:
          description: Unexpected error
          headers:
            API-Version:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.0.0#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: 'https://api.swaggerhub.com/domains/dcsaorg/ERROR_DOMAIN/2.0.1#/components/schemas/error'
  /v2/bookings:
    post:
      tags:
       - Booking Request
      summary: Post a booking request
      operationId: 'getBookings'
      parameters:
        - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.0.0#/components/parameters/Api-Version-Major'
      description: |
        Creates a new booking request. This endPoint corresponds with [**UseCase 1 - Submit booking request**](https://dcsa.sparxcloud.us/L3KJa4) in the Booking Interface Standards (IFS) document.
        
        ## Precondition
        The consumer has information for a `Booking Request`
        
        ## Postcondition
        The provider has received the `Booking Request`. 
        
        The consumer will receive a `201` (Created) if the payload schema-validates or a `400` (Bad Request) if it does not.
        
        If a `201` (Created) is returned - a `ShipmentEvent` with the status `RECE` (Received) is also created. The provider can **optionally** do a full validation in which case a second `ShipmentEvent` is created. The full validation can also be done asynchroniously in which case the second `ShipmentEvent` will be created later.
        
        ## Process
        The following occurs when a provider recieves a booking request:
        1. The payload (`Booking Request`) is schema-validated. In case the payload **is invalid** a `400` (Bad Request) is returned
        2. A `carrierBookingRequestReference` (as a reference to the `Booking Request`) is created and stored along with the payload in the provider system.
          
            **For the rest of this description and in all examples the value `cbr-123` will be used as `carrierBookingRequestReference`**
        3. A `ShipmentEvent` is created:
            ```
            {
              metadata: {
                { ---metadata fields omitted for clarity--- }
              },
              payload: {
                eventClassifierCode: 'ACT',
                eventDateTime: { ---now--- },
                shipmentEventTypeCode: 'RECE',
                documentTypeCode: 'CBR'
                documentReference: 'cbr-123'    // NB: as specified above
              }
            }
            ```
        
        The provider can now choose to either do **No Validation** or make a **Full Validation**

        ### No validation
        
        4. A `201` (Created) response is returned with the following payload
            ```
            {
              carrierBookingRequestReference: 'cbr-123',
              bookingStatus: 'RECE',
              bookingRequestDateTime: '2021-11-03T09:41:00-08:30',
              bookingUpdatedDateTime: '2021-11-03T09:41:00-08:30'
            }
            ```
        For `POST` `Booking Request` the process ends here in case no further validation is done at this point. The `Booking Request`
        
          - is now stored in the provider system
          - has status `RECE` (Received)
          - awaits further processing by the provider
          - a `201` (Created) response is sent to the consumer with a payload containing `bookingStatus='RECE'`
        
        Any further communication from provider to consumer will be done via `ShipmentEvents` and can be monitored by the consumer on the
        
            GET /v2/events
            
          endPoint.
        
        ### Full validation
        4. Do full validation of the payload. Some examples could be:
            - check all conditional fields
            - create a `transportPlan` based on booking request input
            - check equipment and space availability
            - check that `HS Codes` match the `Commodity` descriptions
            - etc
            
            Making a full validation requires the provider to check against all business rules (_the list above is just examples_)
        5. Create a `ShipmentEvent` (in addition to the `ShipmentEvent` created in step 3) with the new status based on the validation result in step 4. The status can be one of the following:
            - **Update required**
               
              If an update to the `Booking Request` is required (equivalent to [**UseCase 2 - Request missing information to booking request**]() in the Booking Interface Standard (IFS) document) a `ShipmentEvent` is created with the status `PENU` (Pending Update) :
              ```
              {
                metadata: {
                   { ---metadata fields omitted for clarity--- }
                },
                payload: {
                  eventClassifierCode: 'ACT',
                  eventDateTime: { ---now--- },
                  shipmentEventTypeCode: 'PENU',
                  documentTypeCode: 'CBR'
                  documentReference: 'cbr-123',
                  reason: 'The Booking Party specified cannot be uniquely identified - please provide some more information'
                }
              }
              ```
            - **Confirm Booking request**
            
              If the `Booking Request` can be confirmed (equivalent to [**UseCase 5 - Confirm booking request**]() in the Booking Interface Standard (IFS) document) a `ShipmentEvent` is created with the status `CONF` (Confirmed):
              ```
              {
                metadata: {
                  { ---metadata fields omitted for clarity--- }
                },
                payload: {
                  eventClassifierCode: 'ACT',
                  eventDateTime: { ---now--- },
                  shipmentEventTypeCode: 'CONF',
                  documentTypeCode: 'CBR'
                  documentReference: 'cbr-123'
                }
              }
              ```
            - **Reject Booking Request**
            
              If the `Booking Request` needs to be rejected (equivalent to [**UseCase 4 - Reject booking request**]() in the Booking Interface Standard (IFS) document) a `ShipmentEvent` is created with the status `REJE` (Rejected):
              ```
              {
                metadata: {
                  { ---metadata fields omitted for clarity--- }
                },
                payload: {
                  eventClassifierCode: 'ACT',
                  eventDateTime: { ---now--- },
                  shipmentEventTypeCode: 'REJE',
                  documentTypeCode: 'CBR'
                  documentReference: 'cbr-123',
                  reason: 'The Booking request has been rejeted due to inactivity during the last 30 days'
                }
              }
              ```
        6. A `201` (Created) response is returned with the following payload (`bookingStatus` can also be `CONF` or `REJE` - `PENU` used in the example)
            ```
            {
              carrierBookingRequestReference: 'cbr-123',
              bookingStatus: 'PENU',
              bookingRequestDateTime: '2021-11-03T09:41:00-08:30',
              bookingUpdatedDateTime: '2021-11-03T09:41:00-08:30'
            }
            ```
        
        For a full validation the `POST` `Booking Request` ends here. The `Booking Request`
            
        - is now stored in the provider system
        - a `ShipmentEvent` with status `RECE` (Received) has been created
        - a full validation has been done
        - a second `ShipmentEvent` is created with one of the following statuses (depending on the result of the full validation):
          - `PENU` (Pending Update) in case provider awaits further input from consumer
          - `CONF` (Confirmed) in case provider has confirmed the `Booking Request` and the `Booking Request` is ready to be used in a `Shipping Instruction`
          - `REJE` (Rejected) in case the provider has rejected the `Booking Request`.
        - a `201` (Created) response is sent to the consumer with a payload containing the `bookingStatus` of the second `ShipmentEvent`
          
        Any further communication from provider to consumer will be done via `ShipmentEvents` and can be monitored by the consumer on the

            GET /v2/events
        endPoint.
      requestBody:
        description: Parameters used to create a booking request
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DOCUMENTATION_DOMAIN/3.0.0#/components/schemas/bookingRequest'
      responses:
        '201':
          description: |
            `Booking Request` has been successfully created in the provider system. Depending on the level of validation done by the provider - the status of the `Booking Request` will be one of the following:
            - `RECE` (Received) in case asynchronous processing of the `Booking Request` begins. The `Booking Request` is now awaiting the provider to finish the validation
            - `PENU` (Pending Update) in case provider needs the `Booking Request` to be updated and awaits further input from consumer
            - `CONF` (Confirmed) in case provider has confirmed the `Booking Request` and the `Booking Request` is ready to be used in a `Shipping Instruction`
            - `REJE` (Rejected) in case the provider has rejected the `Booking Request`. The `Booking Request`can no longer be updated
            
            The status of the `Booking Request` is communicated via `ShipmentEvent(s)` and can be monitored by the consumer on the
              
                GET /v2/events
              
              endPoint.
          headers:
            API-Version:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.0.0#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DOCUMENTATION_DOMAIN/3.0.0#/components/schemas/bookingRefStatus'
              examples:
                receExample:
                  summary: |
                    Booking request received
                  description: |
                    A `Booking Request` has been received (`RECE`) and stored in provider system but not yet fully validated (only schema validated)
                  value:
                    carrierBookingRequestReference: 24595eb0-5cfc-4381-9c3a-cedc1975e9aa
                    bookingStatus: RECE
                    bookingRequestDateTime: '2021-11-03T09:41:00-08:30'
                    bookingUpdatedDateTime: '2021-11-03T09:41:00-08:30'
                penuExample:
                  summary: |
                    Booking request pending update
                  description: |
                    A `Booking Request` received and stored in provider system and fully validated. The result of the full validation has resulted in the provider requiring the consumer to make some updates (`PENU`)
                  value:
                    carrierBookingRequestReference: 24595eb0-5cfc-4381-9c3a-cedc1975e9aa
                    bookingStatus: PENU
                    bookingRequestDateTime: '2021-11-03T09:41:00-08:30'
                    bookingUpdatedDateTime: '2021-11-03T09:41:00-08:30'
                confExample:
                  summary: |
                    Confirmed Booking request
                  description: |
                    A `Booking Request` received and stored in provider system, fully validated and Confirmed (`CONF`).
                  value:
                    carrierBookingRequestReference: 24595eb0-5cfc-4381-9c3a-cedc1975e9aa
                    bookingStatus: CONF
                    bookingRequestDateTime: '2021-11-03T09:41:00-08:30'
                    bookingUpdatedDateTime: '2021-11-03T09:41:00-08:30'
                rejeExample:
                  summary: |
                    Rejected Booking request
                  description: |
                    A `Booking Request` received and stored in provider system but has been rejected (`REJE`).
                  value:
                    carrierBookingRequestReference: 24595eb0-5cfc-4381-9c3a-cedc1975e9aa
                    bookingStatus: REJE
                    bookingRequestDateTime: '2021-11-03T09:41:00-08:30'
                    bookingUpdatedDateTime: '2021-11-03T09:41:00-08:30'
        '401':
          description: |
            In case the `Booking Request` does not schema validate a `401` (Bad Request) is returned
          headers:
            API-Version:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.0.0#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: 'https://api.swaggerhub.com/domains/dcsaorg/ERROR_DOMAIN/2.0.1#/components/schemas/error'
              examples:
                badRequestExample:
                  summary: |
                    Booking missing `receiptTypeAtOrigin`
                  description: |
                    `receiptTypeAtOrigin` is a mandoatry field in the `Booking Request`. This is an example of how the error object would look in case this field is missing
                    
                    **NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a "random example"
                  value:
                    httpMethod: POST
                    requestUri: /v2/bookings
                    statusCode: 400
                    statusCodeText: Bad Request
                    errorMessage: receiptTypeAtOrigin not found - it is a mandatory field in Booking request
                    providerCorrelationID: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2023-04-13T07:41:00+08:30'
                    errors:
                      - errorCode: 7003
                        field: receiptTypeAtOrigin
                        reason: mandatory field missing
                        message: receiptTypeAtOrigin must be provided as part of a Booking request
        '500':
          description: |
            In case a server error occurs in provider system a `500` (Internal Server Error) is returned
          headers:
            API-Version:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.0.0#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: 'https://api.swaggerhub.com/domains/dcsaorg/ERROR_DOMAIN/2.0.1#/components/schemas/error'
              examples:
                internalServerErrorExample:
                  summary: |
                    Internal Server Error while processing Booking Request
                  description: |
                    An Internal Server Error has occurred - the consumer should contact {provider-support} and provide the `providerCorrelationID` (in the example this is `4426d965-0dd8-4005-8c63-dc68b01c4962`)
                    
                    **NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a "random example"
                  value:
                    httpMethod: POST
                    requestUri: /v2/bookings
                    statusCode: 500
                    statusCodeText: Internal Server Error
                    errorMessage: Internal Server Error occurred while processing Booking request
                    providerCorrelationID: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2023-04-13T07:41:00+08:30'
                    errors:
                      - errorCode: 7003
                        reason: Internal Error occurred
                        message: Internal Error occurred
        default:
          description: |
            For other errors the error object should be populated with relevant information
          headers:
            API-Version:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.0.0#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: 'https://api.swaggerhub.com/domains/dcsaorg/ERROR_DOMAIN/2.0.1#/components/schemas/error'
              examples:
                tooManyRequestsExample:
                  summary: |
                    Making too many Bookings Requests
                  description: |
                    Calling the endPoint
                    
                        POST /v2/bookings
                        
                    too many times within a timeperiod.
                    
                    **NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a "random example"
                  value:
                    httpMethod: POST
                    requestUri: /v2/bookings
                    statusCode: 429
                    statusCodeText: Too Many Requests
                    errorMessage: Too many request to create a booking has been requested. Please try again in 1 hour
                    providerCorrelationID: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2023-04-13T07:41:00+08:30'
                    errors:
                      - errorCode: 7003
                        reason: Max Booking requests reached 
                        message: A maximum of 10 Bookings can be created per hour
  /v2/bookings/{carrierBookingRequestReference}:
    get:
      tags:
       - Booking Request
      summary: Get booking requests
      operationId: 'getBooking'
      description: |
        Retrieves the `Booking Request` with the `carrierBookingRequestReference` in the path. It is recommended to use this endPoint to `GET` data before an update is made to make sure latest version is being updated.
      parameters:
        - $ref: '#/components/parameters/carrierBookingRequestReferencePathParam'
        - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.0.0#/components/parameters/Api-Version-Major'
      responses:
        '200':
          description: Request successful
          headers:
            API-Version:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.0.0#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DOCUMENTATION_DOMAIN/3.0.0#/components/schemas/bookingResponse'
        default:
          description: Unexpected error
          headers:
            API-Version:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.0.0#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: 'https://api.swaggerhub.com/domains/dcsaorg/ERROR_DOMAIN/2.0.1#/components/schemas/error'
              examples:
                getError:
                  summary: |
                    GET non-existing Booking Request
                  description: |
                    Calling
                    
                        GET /v2/bookings/123
                        
                    results in an error as booking 123 does not exist.
                    
                    **NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a "random example"
                  value:
                    httpMethod: GET
                    requestUri: /v2/bookings
                    statusCode: 429
                    statusCodeText: Too Many Requests
                    errorMessage: Too many request to create a booking has been requested. Please try again in 1 hour
                    providerCorrelationID: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2023-04-13T07:41:00+08:30'
                    errors:
                      - errorCode: 7003
                        reason: Max Booking requests reached 
                        message: A maximum of 10 Bookings can be created per hour
    put:
      tags:
       - Booking Request
      summary: Put booking requests
      operationId: 'putBooking'
      parameters:
        - $ref: '#/components/parameters/carrierBookingRequestReferencePathParam'
        - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.0.0#/components/parameters/Api-Version-Major'
      description: |
        Updates the `Booking Request` with the `carrierBookingRequestReference` in the path. This endPoint corresponds with either
        
        - [UseCase 3 - Submit updated booking request]()
        - [UseCase 7 - Request amendments to booking request]()
        
        from the Booking Interface Standards (IFS) Document. This endPoint is to be used in response to
        
        - [UseCase 2 - Request missing information to booking request]()
        - [UseCase 6 - Request to update booking request]()
        
        ### Precondition
        In order to update a booking, the status of the booking needs to be either
        
        - `RECE` (Received) or `PENU` (Pending Update) in case this endPoint is being used for [UseCase 3 - Submit updated booking request]()
        - `CONF` (Confirmed) or `PENU` (Pending Update) in case this endPoint is being used for [UseCase 7 - Request amendments to booking request]()
        
        ## Postcondition
        The provider has received an update or amendment to the booking.

        The consumer will receive a `200` (Ok) if the payload schema-validates or a 400 (Bad Request) if it does not.
        
        If a 200 (Ok) is returned - a `ShipmentEvent` with the status `RECE` (Received) is also created. The provider can optionally do a full validation in which case a second `ShipmentEvent` is created.
        
        ## Process
        The following occurs when a provider recieves a booking request:
        1. The payload (booking request) is schema-validated. In case the payload **is invalid** a `400` (Bad Request) is returned
        2. The updated Booking request is stored in the provider database.
          
            **For the rest of this description and in all examples the value `cbr-123` will be used as `carrierBookingRequestReference`**
        3. A `ShipmentEvent` is created:
            ```
            {
              metadata: {
                { ---metadata fields omitted for clarity--- }
              },
              payload: {
                eventClassifierCode: 'ACT',
                eventDateTime: { ---now--- },
                shipmentEventTypeCode: 'RECE',
                documentTypeCode: 'CBR'
                documentReference: 'cbr-123'    // NB: as specified above
              }
            }
            ```
        
        The provider can now choose to either do **no validation** or make a **full validation**

        ### No validation
        4. A `200` (Ok) response is returned with the following payload
            ```
            {
              carrierBookingRequestReference: 'cbr-123',
              bookingStatus: 'RECE',
              bookingRequestDateTime: '2021-11-03T09:41:00-08:30',
              bookingUpdatedDateTime: '2021-11-03T09:41:00-08:30'
            }
            ```
        For `PUT` Booking request the process ends here in case no further validation is done at this point. The **updated** Booking request
        
          - is now stored in the provider system
          - has status `RECE` (Received)
          - awaits further processing by the provider
          - a `200` (Ok) response is sent to the consumer with a payload containing `bookingStatus=RECE`
        
        Any further communication from provider to consumer will be done via `ShipmentEvents` and can be monitored by the consumer on the
        
            GET /v2/events
            
          endPoint.
        
        ### Full validation
        4. Do full validation of the payload. Some examples could be:
            - check all conditional fields
            - create a `transportPlan` based in booking request input
            - check equipment and space availability
            - etc
            
            Making a full validation requires the provider to check against all business rules (_the list above is just examples_)
        5. Create a `ShipmentEvent` (in addition to the `ShipmentEvent` created in step 3) with the new status based on the validation result in step 4:
            - **Update required**
               
              If an update to the Booking request is required (equivalent to [**UseCase 2 - Request missing information to booking request**]() in the Booking Interface Standard (IFS) document) a `ShipmentEvent` is created with the status `PENU` (Pending Update) :
              ```
              {
                metadata: {
                   { ---metadata fields omitted for clarity--- }
                },
                payload: {
                  eventClassifierCode: 'ACT',
                  eventDateTime: { ---now--- },
                  shipmentEventTypeCode: 'PENU',
                  documentTypeCode: 'CBR'
                  documentReference: 'cbr-123',
                  reason: 'The Booking Party specified cannot be uniquely identified - please provide some more information'
                }
              }
              ```
            - **Confirm Booking request**
            
              If the booking request can be confirmed (equivalent to [**UseCase 5 - Confirm booking request**]() in the Booking Interface Standard (IFS) document) a `ShipmentEvent` is created with the status `CONF` (Confirmed):
              ```
              {
                metadata: {
                  { ---metadata fields omitted for clarity--- }
                },
                payload: {
                  eventClassifierCode: 'ACT',
                  eventDateTime: { ---now--- },
                  shipmentEventTypeCode: 'CONF',
                  documentTypeCode: 'CBR'
                  documentReference: 'cbr-123'
                }
              }
              ```
            - **Reject booking request**
            
              If the booking request needs to be rejected (equivalent to [**UseCase 4 - Reject booking request**]() in the Booking Interface Standard (IFS) document) a `ShipmentEvent` is created with the status `REJE` (Rejected):
              ```
              {
                metadata: {
                  { ---metadata fields omitted for clarity--- }
                },
                payload: {
                  eventClassifierCode: 'ACT',
                  eventDateTime: { ---now--- },
                  shipmentEventTypeCode: 'REJE',
                  documentTypeCode: 'CBR'
                  documentReference: 'cbr-123',
                  reason: 'The Booking request has been rejeted due to inactivity during the last 30 days'
                }
              }
              ```
        6. A `200` (Ok) response is returned with the following payload (`bookingStatus` can also be `CONF` or `REJE` - `PENU` used in the example)
            ```
            {
              carrierBookingRequestReference: 'cbr-123',
              bookingStatus: 'PENU',
              bookingRequestDateTime: '2021-11-03T09:41:00-08:30',
              bookingUpdatedDateTime: '2021-11-03T09:41:00-08:30'
            }
            ```
        
        For a full validation the `PUT` Booking request ends here. The updated Booking request
            
        - is now stored in the provider system
        - a `ShipmentEvent` with status `RECE` (Received) has been created
        - a full validation has been done
        - a second `ShipmentEvent` is created with one of the following statuses:
          - `PENU` (Pending Update) in case provider awaits further input from consumer
          - `CONF` (Confirmed) in case provider has confirmed the Booking request and the Booking request is ready to be used in a `Shipping Instruction`
          - `REJE` (Rejected) in case the provider has rejected the Booking request.
        - a `200` (Ok) response is sent to the consumer with a payload containing the `bookingStatus` of the second `ShipmentEvent`
          
        Any further communication from provider to consumer will be done via `ShipmentEvents` and can be monitored by the consumer on the

            GET /v2/events
        endPoint.
      requestBody:
        description: Parameters used to update the booking request
        required: true
        content:
          application/json:
            schema:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DOCUMENTATION_DOMAIN/3.0.0#/components/schemas/booking'
      responses:
        '200':
          description: |
            The Booking request has been successfully updated in the provider system. Depending on the level of validation done by the provider - the status of the Booking request will be one of the following:
            - `RECE` (Received) in case asynchronous processing of the Booking request begins. The Booking request is now awaiting the provider to finish the validation
            - `PENU` (Pending Update) in case provider needs the Booking request to be updated and awaits further input from consumer
            - `CONF` (Confirmed) in case provider has confirmed the Booking request and the Booking request is ready to be used in a `Shipping Instruction`
            - `REJE` (Rejected) in case the provider has rejected the Booking request. The Booking request can no longer be updated
            
            The status of the Booking request is communicated via `ShipmentEvent(s)` and can be monitored by the consumer on the
              
                GET /v2/events
              
              endPoint.
          headers:
            API-Version:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.0.0#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DOCUMENTATION_DOMAIN/3.0.0#/components/schemas/bookingRefStatus'
              examples:
                receExample:
                  summary: |
                    Booking request received
                  description: |
                    An updated Booking request received (`RECE`) and stored in provider system but not yet fully validated (only schema validated)
                  value:
                    carrierBookingRequestReference: 24595eb0-5cfc-4381-9c3a-cedc1975e9aa
                    bookingStatus: RECE
                    bookingRequestDateTime: '2023-04-13T09:41:00-08:30'
                    bookingUpdatedDateTime: '2023-04-13T09:41:00-08:30'
                penuExample:
                  summary: |
                    Booking request pending update
                  description: |
                    An updated Booking request received and stored in provider system and fully validated. The result of the full validation has resulted in the provider requiring the consumer to make some updates (`PENU`)
                  value:
                    carrierBookingRequestReference: 24595eb0-5cfc-4381-9c3a-cedc1975e9aa
                    bookingStatus: PENU
                    bookingRequestDateTime: '2023-04-13T09:41:00-08:30'
                    bookingUpdatedDateTime: '2023-04-13T09:41:00-08:30'
                confExample:
                  summary: |
                    Confirmed Booking request
                  description: |
                    An updated Booking request received and stored in provider system, fully validated and Confirmed (`CONF`).
                  value:
                    carrierBookingRequestReference: 24595eb0-5cfc-4381-9c3a-cedc1975e9aa
                    bookingStatus: CONF
                    bookingRequestDateTime: '2023-04-13T09:41:00-08:30'
                    bookingUpdatedDateTime: '2023-04-13T09:41:00-08:30'
                rejeExample:
                  summary: |
                    Rejected Booking request
                  description: |
                    An updated Booking request received and stored in provider system, fully validated but has been rejected (`REJE`).
                  value:
                    carrierBookingRequestReference: 24595eb0-5cfc-4381-9c3a-cedc1975e9aa
                    bookingStatus: REJE
                    bookingRequestDateTime: '2023-04-13T09:41:00-08:30'
                    bookingUpdatedDateTime: '2023-04-13T09:41:00-08:30'
        '401':
          description: |
            In case the updated Booking request does not schema validate a `401` (Bad Request) is returned
          headers:
            API-Version:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.0.0#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: 'https://api.swaggerhub.com/domains/dcsaorg/ERROR_DOMAIN/2.0.1#/components/schemas/error'
              examples:
                badRequestExample:
                  summary: |
                    Booking missing `receiptTypeAtOrigin`
                  description: |
                    `receiptTypeAtOrigin` is a mandoatry field in the Booking request. This is an example of how the error object would look in case this field is missing
                    
                    **NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a "random example"
                  value:
                    httpMethod: PUT
                    requestUri: /v2/bookings
                    statusCode: 400
                    statusCodeText: Bad Request
                    errorMessage: receiptTypeAtOrigin not found - it is a mandatory field in Booking request
                    providerCorrelationID: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2023-04-13T07:41:00+08:30'
                    errors:
                      - errorCode: 7003
                        field: receiptTypeAtOrigin
                        reason: mandatory field missing
                        message: receiptTypeAtOrigin must be provided as part of a Booking request
        '500':
          description: |
            In case a server error occurs in provider system a `500` (Internal Server Error) is returned
          headers:
            API-Version:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.0.0#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: 'https://api.swaggerhub.com/domains/dcsaorg/ERROR_DOMAIN/2.0.1#/components/schemas/error'
              examples:
                internalServerErrorExample:
                  summary: |
                    Internal Server Error while processing Booking request
                  description: |
                    An Internal Server Error has occurred - the consumer should contact {provider-support} and provide the `providerCorrelationID` (in the example this is `4426d965-0dd8-4005-8c63-dc68b01c4962`)
                    
                    **NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a "random example"
                  value:
                    httpMethod: PUT
                    requestUri: /v2/bookings
                    statusCode: 500
                    statusCodeText: Internal Server Error
                    errorMessage: Internal Server Error occurred while processing Booking request
                    providerCorrelationID: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2023-04-13T07:41:00+08:30'
                    errors:
                      - errorCode: 7003
                        reason: Internal Error occurred
                        message: Internal Error occurred
        default:
          description: |
            For other errors the error object should be populated with relevant information
          headers:
            API-Version:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.0.0#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: 'https://api.swaggerhub.com/domains/dcsaorg/ERROR_DOMAIN/2.0.1#/components/schemas/error'
              examples:
                tooManyRequestsExample:
                  summary: |
                    Making too many Bookings requests
                  description: |
                    Calling the endPoint PUT /v2/bookings too many times within a timeperiod.
                    
                    **NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a "random example"
                  value:
                    httpMethod: PUT
                    requestUri: /v2/bookings
                    statusCode: 429
                    statusCodeText: Too Many Requests
                    errorMessage: Too many request to create a booking has been requested. Please try again in 1 hour
                    providerCorrelationID: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2023-04-13T07:41:00+08:30'
                    errors:
                      - errorCode: 7003
                        reason: Max Booking requests reached 
                        message: A maximum of 10 Bookings can be created per hour
    patch:
      tags:
       - Cancellation
      summary: Cancel a booking
      operationId: 'patchBooking'
      description: |
        A shipper initiated cancellation of the Booking. This endPoint corresponds with [**UseCase 9 - Cancel booking by shipper**]() in the Booking Interface Standards (IFS) document.
        
        ## Precondition
        In order to cancel a booking, the status of the booking needs to be either
        - `RECE` (Received)
        - `PENU` (Pending Update)
        - `PENC` (Pending Confirmation)
        - `CONF` (Confirmed)
        
        
        **TODO - update the below...**
        
        
        ## Postcondition
        The provider has received the Booking request. 
        
        The consumer will receive a `201` (Created) if the payload schema-validates or a `400` (Bad Request) if it does not.
        
        If a `201` (Created) is returned - a `ShipmentEvent` with the status `RECE` (Received) is also created. The provider can optionally do a full validation in which case a second `ShipmentEvent` is created.
        
        ## Process
        The following occurs when a provider recieves a booking request:
        1. The payload (booking request) is schema-validated. In case the payload **is invalid** a `400` (Bad Request) is returned
        2. A `carrierBookingRequestReference` (as a reference to the booking request) is created and stored along with the payload in the provider database.
          
            **For the rest of this description and in all examples the value `cbr-123` will be used as `carrierBookingRequestReference`**
        3. A `ShipmentEvent` is created:
            ```
            {
              metadata: {
                { ---metadata fields omitted for clarity--- }
              },
              payload: {
                eventClassifierCode: 'ACT',
                eventDateTime: { ---now--- },
                shipmentEventTypeCode: 'RECE',
                documentTypeCode: 'CBR'
                documentReference: 'cbr-123'    // NB: as specified above
              }
            }
            ```
        
        The provider can now choose to either do **no validation** or make a **full validation**

        ### No validation

      parameters:
        - $ref: '#/components/parameters/carrierBookingRequestReferencePathParam'
        - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.0.0#/components/parameters/Api-Version-Major'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              allOf:
                - type: object
                  properties:
                    bookingStatus:
                      allOf:
                        - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DOCUMENTATION_DOMAIN/3.0.0#/components/schemas/bookingStatusCancelled'
                - type: object
                  properties:
                    reason:
                      allOf:
                        - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/EVENT_DOMAIN/3.2.0#/components/schemas/reason'
                # Extension of the reason field to describe the reason for cancellation
                - type: object
                  properties:
                    reason:
                      description: |
                        An optional field where a reason for cancelling the booking can be given.
                      example:
                        Booking cancelled due to internal problems
              required:
                - bookingStatus
      responses:
        '200':
          description: |
            Booking has been cancellated
          headers:
            API-Version:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.0.0#/components/headers/API-Version'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DOCUMENTATION_DOMAIN/3.0.0#/components/schemas/bookingRefCancelledStatus'

        default:
          description: Unexpected error
          headers:
            API-Version:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.0.0#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: 'https://api.swaggerhub.com/domains/dcsaorg/ERROR_DOMAIN/2.0.1#/components/schemas/error'
  
  /v2/shipment-summaries:
    get:
      tags:
       - Shipment
      summary: Get shipments
      operationId: 'getShipmentSummaries'
      description: |
        Retrieves the shipment _metadata_
        
        If not specified - this list will be sorted by the time the `Shipment` was created (shipmentCreatedDateTime) in ascending (ASC) order.
      parameters:
        - $ref: '#/components/parameters/bookingStatus'

        # - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.0.0#/components/parameters/cursor'
        # - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.0.0#/components/parameters/offset'
        - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.0.0#/components/parameters/limit'
        - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.0.0#/components/parameters/sort'
        - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.0.0#/components/parameters/Api-Version-Major'
      responses:
        '200':
          description: Request successful
          headers:
            API-Version:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.0.0#/components/headers/API-Version'
            Current-Page:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.0.0#/components/headers/Current-Page'
            Next-Page:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.0.0#/components/headers/Next-Page'
            Prev-Page:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.0.0#/components/headers/Prev-Page'
            Last-Page:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.0.0#/components/headers/Last-Page'
            First-Page:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.0.0#/components/headers/First-Page'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DOCUMENTATION_DOMAIN/3.0.0#/components/schemas/shipmentSummary'
        default:
          description: Unexpected error
          headers:
            API-Version:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.0.0#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: 'https://api.swaggerhub.com/domains/dcsaorg/ERROR_DOMAIN/2.0.1#/components/schemas/error'
  /v2/shipments/{carrierBookingReference}:
    get:
      tags:
       - Shipment
      summary: Get shipment
      operationId: 'getShipment'
      description: |
        Retrieves the shipment with the `carrierBookingReference` in the path.
      parameters:
        - $ref: '#/components/parameters/carrierBookingReferencePathParam'
        - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.0.0#/components/parameters/Api-Version-Major'
      responses:
        '200':
          description: Request successful
          headers:
            API-Version:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.0.0#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DOCUMENTATION_DOMAIN/3.0.0#/components/schemas/shipment'
        default:
          description: Unexpected error
          headers:
            API-Version:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.0.0#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: 'https://api.swaggerhub.com/domains/dcsaorg/ERROR_DOMAIN/2.0.1#/components/schemas/error'
  /v2/events:
    get:
      tags:
       - Booking Events
      summary: Get Shipment events
      operationId: 'getEvents'
      description: |
        Retrieves `Booking` related `ShipmentEvents`. This endPoint contains all status changes for all bookings.
        
        ### Booking lifecycle states
        When a booking changes state a `ShipmentEvent` is created. The lifecycle of a booking can be monitored through this endPoint. In order to detect changes to a particular booking polling must be done. An example of polling on `carrierBookingRequestReference`**=cbr123** would look like this
        ```
        GET /v2/events?documentTypeCode=CBR&documentReference=cbr123
        ```
        This would result in a list of `ShipmentEvents` where `carrierBookingRequestReference` is **cbr123** sorted in `ASC` order based on `eventCreatedDateTime` (wich is the default sorting). An example of a result could look like this
        ```
        [
          {
            metadata: {
              { ---metadata fields omitted for clarity--- }
            },
            payload: {
              eventClassifierCode: 'ACT',
              eventDateTime: '2023-04-14T14:12:56-01:00',
              shipmentEventTypeCode: 'RECE',
              documentTypeCode: 'CBR'
              documentReference: 'cbr-123'
            }
          },
          {
            metadata: {
              { ---metadata fields omitted for clarity--- }
            },
            payload: {
              eventClassifierCode: 'ACT',
              eventDateTime: '2023-04-14T17:12:56-01:00',
              shipmentEventTypeCode: 'PENU',
              documentTypeCode: 'CBR'
              documentReference: 'cbr-123'
            }
          }
        ]
        ```
        The above shows 2 `ShipmentEvents`. The first `ShipmentEvent` shows that the booking was received `2023-04-14T14:12:56-01:00` and status was `RECE` (Received). The second `ShipmentEvent` is from `2023-04-14T17:12:56-01:00` and indicates that the provider is waiting for the booking to be updated - the state of the booking is `PENU` (Pending Update).
        
        As `PENU` (Pending Update) is the status of the **last** `ShipmentEvent` for `carrierBookingRequestReference` = **cbr123** this status is also the current state of the booking.
        
        ### Asynchronous Communication
        Asynchronous communication from the provider to the consumer - here meaning communication not initiated by the consumer - is done via this endPoint. Whenever the provider needs to communicate that the consumer needs to perform an action a new `ShipmentEvent` is created. This is the case for the following 6 useCases (from the Booking Interface Standards (IFS) document):
        
        - [UseCase 2 - Request missing information to booking request]()
        - [UseCase 4 - Reject booking request]()
        - [UseCase 5 - Confirm booking request]()
        - [UseCase 6 - Request to update booking request]()
        - [UseCase 8 - Confirm amendments to booking request]()
        - [UseCase 11 - Confirm booking completed]()
        
        In all of the above useCases the provider communicates a change of state to the consumer. In case no subscriptions have been set up - the consumer is expected to periodically poll this endPoint for status changes.

        ### Default sort
        If not specified - this list will be sorted by the time the `ShipmentEvent` was created (`eventCreatedDateTime`) in ascending (`ASC`) order.
      parameters:
        # Chunk with specialized booking related ShipmentEvent parameters
        - $ref: '#/components/parameters/shipmentEventTypeCodes'
        - $ref: '#/components/parameters/documentTypeCodes'
        - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/EVENT_DOMAIN/3.2.0#/components/parameters/documentReference'
        
        - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/EVENT_DOMAIN/3.2.0#/components/parameters/equipmentReference'

        # - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/EVENT_DOMAIN/3.2.0#/components/parameters/carrierBookingReference'
        # - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/EVENT_DOMAIN/3.2.0#/components/parameters/carrierBookingRequestReference'

        # Chunk with base event parameters
        - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/EVENT_DOMAIN/3.2.0#/components/parameters/eventCreatedDateTime'
        - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/EVENT_DOMAIN/3.2.0#/components/parameters/eventDateTime'

        # Chunk with Global related event parameters
        # - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.0.0#/components/parameters/cursor'
        # - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.0.0#/components/parameters/offset'
        - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.0.0#/components/parameters/limit'
        - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.0.0#/components/parameters/sort'
        - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.0.0#/components/parameters/Api-Version-Major'
      responses:
        '200':
          description: |
            Request successful. A list of `ShipmentEvents` matching the query-parameters provided (if any).
            
             If not specified - this list is sorted by the time the `ShipmentEvent` was created (`eventCreatedDateTime`) in ascending (`ASC`) order.
          headers:
            API-Version:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.0.0#/components/headers/API-Version'
            Current-Page:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.0.0#/components/headers/Current-Page'
            Next-Page:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.0.0#/components/headers/Next-Page'
            Prev-Page:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.0.0#/components/headers/Prev-Page'
            Last-Page:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.0.0#/components/headers/Last-Page'
            First-Page:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.0.0#/components/headers/First-Page'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'https://api.swaggerhub.com/domains/dcsaorg/EVENT_DOMAIN/3.2.0#/components/schemas/shipmentEvent'
        default:
          description: |
            For errors the error object should be populated with relevant information
          headers:
            API-Version:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.0.0#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: 'https://api.swaggerhub.com/domains/dcsaorg/ERROR_DOMAIN/2.0.1#/components/schemas/error'
              examples:
                tooManyRequestsExample:
                  summary: |
                    Polling too heavily
                  description: |
                    Calling the endPoint GET /v2/events too many times within a timeperiod.
                    
                    **NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a "random example"
                  value:
                    httpMethod: POST
                    requestUri: /v2/events
                    statusCode: 429
                    statusCodeText: Too Many Requests
                    errorMessage: Too many request to poll on events has been requested. Please try again in 1 hour
                    providerCorrelationID: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2023-04-13T07:41:00+08:30'
                    errors:
                      - errorCode: 7003
                        reason: Max requests reached 
                        message: A maximum of 60 requests can be created per hour

components:
  # schemas:
    # documentTypeCode:
    #   type: string
    #   maxLength: 3
    #   description: |
    #     The code to identify the type of information `documentID` points to. Can be one of the following values
    #     - CBR (Carrier Booking Request Reference)
    #     - BKG (Booking)

    #     More details can be found on <a href="https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/documenttypecodes.csv">GitHub</a>. Be aware that the list provided here is a subset of the possible values.
    #   example: CBR
    #   enum:
    #     - CBR
    #     - BKG
    # shipmentEventTypeCode:
    #   type: string
    #   description: |
    #     The status of the booking in the process. Possible values are
    #     - RECE (Received)
    #     - PENU (Pending Update)
    #     - PENC (Pending Confirmation)
    #     - CONF (Confirmed)
    #     - REJE (Rejected)
    #     - CANC (Cancelled)

    #     More details can be found on <a href="https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/shipmenteventtypecodes.csv">GitHub</a>. Be aware that the list provided here is a subset of the possible values.
    #   enum:
    #     - RECE
    #     - PENU
    #     - PENC
    #     - CONF
    #     - REJE
    #     - CANC
    #   example: CONF
    
  parameters:
  
    #############
    # Path params
    #############
    
    carrierBookingRequestReferencePathParam:
      in: path
      name: carrierBookingRequestReference
      description: |
        The `carrierBookingRequestReference` of the booking request to match
      schema:
        $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.0.0#/components/schemas/carrierBookingRequestReference'
      required: true
    carrierBookingReferencePathParam:
      in: path
      name: carrierBookingReference
      schema:
        $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.0.0#/components/schemas/carrierBookingReference'
      required: true

    ##############
    # Query params
    ##############
    
    bookingStatus:
      in: query
      name: bookingStatus
      description: |
        Filter by the status of the booking. Possible values are:
        - RECE (Received)
        - PENU (Pending Update)
        - PENC (Pending Confirmation)
        - CONF (Confirmed)
        - REJE (Rejected)
        - CANC (Cancelled)
        - CMPL (Completed)

        More details can be found on <a href="https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/shipmenteventtypecodes.csv">GitHub</a>. Be aware that the list linked to is the `ShipmentEventTypeCodes` which is equivalent to `bookingStatus`, the list is a subset of the possible values.
      schema:
        $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DOCUMENTATION_DOMAIN/3.0.0#/components/schemas/bookingStatus'
    documentTypeCodes:
      in: query
      name: documentTypeCode
      explode: false
      style: form
      description: |
        The `documentTypeCode` to filter by. Possible values are
        - CBR (Carrier Booking Request Reference)
        - BKG (Booking)

        It is possible to select multiple values by comma `,` separating them. For multiple values the OR-operator is used. For example _documentTypeCode=CBR,BKG_ Matches **both** `ShipmentEvents` related to Booking Requests (`CBR`) and Confirmed Bookings (`BKG`).

        More details can be found on <a href="https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/documenttypecodes.csv">GitHub</a>. Be aware that the list provided here is a subset of the possible values.        
      example: CBR
      schema:
        default: [CBR,BKG]
        type: array
        items:
          $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DOCUMENTATION_DOMAIN/3.0.0#/components/schemas/bookingDocumentTypeCode'
    # carrierBookingRequestReferenceQueryParam:
    #   in: query
    #   name: carrierBookingRequestReference
    #   description: |
    #     A temporary ID provided by carrier to identify a booking request.
        
    #     Specifying this filter will only return booking requests related to this particular `carrierBookingRequestReference`.
    #   schema:
    #     $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.0.0#/components/schemas/carrierBookingRequestReference'
    # carrierBookingReferenceQueryParam:
    #   in: query
    #   name: carrierBookingReference
    #   description: |
    #     A set of unique characters provided by carrier to identify a confirmed booking.
        
    #     Specifying this filter will only return confirmed bookings related to this particular `carrierBookingReference`.
    #   schema:
    #     $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.0.0#/components/schemas/carrierBookingReference'
    shipmentEventTypeCodes:
      in: query
      name: shipmentEventTypeCode
      explode: false
      style: form
      description: |
        The status of the document in the booking process to filter by. Possible values are
        - RECE (Received)
        - PENU (Pending Update)
        - PENC (Pending Confirmation)
        - CONF (Confirmed)
        - REJE (Rejected)
        - CANC (Cancelled)
        - CMPL (Completed)

        It is possible to select multiple values by comma `,` separating them. For multiple values the OR-operator is used. For example _shipmentEventTypeCode=RECE,CONF_  Matches **both** Received (`RECE`) and Confirmed (`CONF`) `ShipmentEvents`.

        More details can be found on <a href="https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/shipmenteventtypecodes.csv">GitHub</a>. Be aware that the list provided here is a subset of the possible values.
      example: [RECE,CONF]
      schema:
        default: [RECE,PENU,PENC,CONF,REJE,CANC,CMPL]
        type: array
        items:
          $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DOCUMENTATION_DOMAIN/3.0.0#/components/schemas/bookingShipmentEventTypeCode'
