openapi: 3.0.3
info:
  version: 3.0.0-Beta-1
  title: DCSA OpenAPI specification for Electronic Bill of Lading
  description: |
    API specification issued by DCSA.org.
    
    For explanation to specific values or objects please refer to the [Information Model v2023.Q3]() *** _Will be updated_ ***. This API does not define the business rules regarding what is allowed to update at what time. For this the [Electronic Bill of Lading IFS]() *** _Will be updated_ *** should be consulted.
    
    All other documents related to the Electronic Bill of Lading publication can be found [here](https://knowledge.dcsa.org/s/publication?publicationId=a0r7T000000L8lPQAS)

    It is possible to use this API as a standalone API. In order to do so it is necessary to use the poll-endPoint
    - /v3/events

    in order to poll event information.

    It is recomended to implement the [DCSA Documentation Event Hub](https://app.swaggerhub.com/apis/dcsaorg/DOCUMENTATION_EVENT_HUB) in order to use the push model. Here events are pushed as they occur.

    For a changelog please click [here](https://github.com/dcsaorg/DCSA-OpenAPI/tree/master/ebl/v3#v300B1). Please also [create a GitHub issue](https://github.com/dcsaorg/DCSA-OpenAPI/issues/new) if you have any questions/comments.

  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  contact:
    name: Digital Container Shipping Association (DCSA)
    url: https://dcsa.org
    email: info@dcsa.org
tags:
  - name: Shipping Instructions
    description: |
      The initial steps by the Shipper to create a Bill of Lading
  - name: Transport Documents
    description: |
      The Transport Document as agreed by both parties
  - name: Bill of Lading Events
    description: |
      If no subscriptions have been setup, event polling can be done here
paths:
  /v3/shipping-instructions-summaries:
    get:
      tags:
       - Shipping Instructions
      summary: Get shipping instructions
      description: |
        Retrieves the shipping instruction _metadata_
        
        If not specified - this list will be sorted by the time the `ShippingInstruction` was created (shippingInstructionCreatedDateTime) in ascending (ASC) order.
      parameters:
        - $ref: '#/components/parameters/carrierBookingReferences'
        # - in: query
        #   name: carrierBookingReference
        #   description: |
        #     A set of unique characters provided by carrier to identify a booking confirmation.
            
        #     Specifying this filter will only return Shipping Instructions related to this particular `carrierBookingReference`.
        #   schema:
        #     $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.1.0#/components/schemas/carrierBookingReference'
        - $ref: '#/components/parameters/documentStatus'

        # - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.1.0#/components/parameters/cursor'
        # - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.1.0#/components/parameters/offset'
        - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.1.0#/components/parameters/limit'
        - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.1.0#/components/parameters/sort'
        - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.1.0#/components/parameters/Api-Version-Major'
      responses:
        '200':
          description: Request successful
          headers:
            API-Version:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.1.0#/components/headers/API-Version'
            Current-Page:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.1.0#/components/headers/Current-Page'
            Next-Page:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.1.0#/components/headers/Next-Page'
            Prev-Page:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.1.0#/components/headers/Prev-Page'
            Last-Page:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.1.0#/components/headers/Last-Page'
            First-Page:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.1.0#/components/headers/First-Page'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DOCUMENTATION_DOMAIN/3.0.0#/components/schemas/shippingInstructionSummary'
        default:
          description: Unexpected error
          headers:
            API-Version:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.1.0#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: 'https://api.swaggerhub.com/domains/dcsaorg/ERROR_DOMAIN/2.0.1#/components/schemas/error'
  /v3/shipping-instructions:
    post:
      tags:
       - Shipping Instructions
      summary: Post a shipping instruction
      operationId: 'postShippingInstruction'
      description: |
        Creates a new Shipping Instruction. This endPoint corresponds with [**UseCase 1 - Submit Shipping Instruction**]() in the Electronic Bill of Lading Interface Standards (IFS) document.
        
        ## Precondition
        The consumer has information for a `Shipping Instruction`.
        
        ## Postcondition
        The provider has received the `Shipping Instruction`.
        
        The consumer will receive a `201` (Created) if the payload schema-validates or a `400` (Bad Request) if it does not.
        
        If a `201` (Created) is returned - a `ShipmentEvent` with the status `RECE` (Received) is also created. The provider can **optionally** do a full validation in which case a second `ShipmentEvent` is created. The full validation can also be done asynchroniously in which case the second `ShipmentEvent` will be created later.
        
        ## Process
        The following occurs when a provider recieves a booking request:
        1. The payload (Shipping Instruction) is schema-validated. In case the payload **is invalid** a `400` (Bad Request) is returned
        2. A `shippingInstructionReference` (as a reference to the Shipping Instruction) is created and stored along with the payload in the provider database.
          
            **For the rest of this description and in all examples the value `si-123` will be used as `shippingInstructionReference`**
        3. A `ShipmentEvent` is created:
            ```
            {
              metadata: {
                { ---metadata fields omitted for clarity--- }
              },
              payload: {
                eventClassifierCode: 'ACT',
                eventDateTime: { ---now--- },
                shipmentEventTypeCode: 'RECE',
                documentTypeCode: 'SHI'
                documentReference: 'si-123'    // NB: as specified above
              }
            }
            ```
        
        The provider can now choose to either do **no validation** or make a **full validation**

        ### No validation
        4. A `201` (Created) response is returned with the following payload
            ```
            {
              shippingInstructionReference: 'si-123',
              documentStatus: 'RECE'
            }
            ```
        For `POST` Shipping Instruction the process ends here in case no further validation is done at this point. The Shipping Instruction
        
          - is now stored in the provider system
          - has status `RECE` (Received)
          - awaits further processing by the provider
          - a `201` (Created) response is sent to the consumer with a payload containing `documentStatus=RECE`
        
        Any further communication from provider to consumer will be done via `ShipmentEvents` and can be monitored by the consumer on the
        
            GET /v3/events
            
          endPoint.
        
        ### Full validation
        4. Do full validation of the payload. Some examples could be:
            - check all conditional fields
            - check Equipment References specified
            - check...
            - etc
            
            Making a full validation requires the provider to check against all business rules (_the list above is just examples_)
        5. Create a `ShipmentEvent` (in addition to the `ShipmentEvent` created in step 3) with the new status based on the validation result in step 4:
            - **Update required**
               
              If an update to the Shipping Instruction is required (equivalent to [**UseCase 2 - Request update to Shipping instruction**]() in the Electronic Bill of Lading Interface Standard (IFS) document) a `ShipmentEvent` is created with the status `PENU` (Pending Update) :
              ```
              {
                metadata: {
                   { ---metadata fields omitted for clarity--- }
                },
                payload: {
                  eventClassifierCode: 'ACT',
                  eventDateTime: { ---now--- },
                  shipmentEventTypeCode: 'PENU',
                  documentTypeCode: 'SHI'
                  documentReference: 'si-123',
                  reason: 'The Consginee Party specified cannot be uniquely identified - please provide some more information'
                }
              }
              ```
            - **Draft Transport Document**
            
              If the Shipping Instruction is accepted a Draft Transport Document is published (equivalent to [**UseCase 4 - Publish Draft Transport Document**]() in the Electronic Bill of Lading Interface Standard (IFS) document) a `ShipmentEvent` is created with the status `DRFT` (Drafted). The `ShipmentEvent` contains the `transportDocumentReference`. **For the rest of this description and in all examples the value `td-987` will be used as `transportDocumentReference`.**
                
                TransportDocument `td-987` will be linked to ShippingInstruction `si-123`. It will now be possible to call:
                
                   GET /v3/transport-documents/td-987
                   
                In order to get the `Transport Document`. Here is an example of the `ShipmentEvent`:

              ```
              {
                metadata: {
                  { ---metadata fields omitted for clarity--- }
                },
                payload: {
                  eventClassifierCode: 'ACT',
                  eventDateTime: { ---now--- },
                  shipmentEventTypeCode: 'DRFT',
                  documentTypeCode: 'TRD'
                  documentReference: 'td-987'
                }
              }
              ```
            - **Reject Shipping Instruction ???**
            
              If the Shipping Instruction needs to be rejected (equivalent to [**UseCase ??? - *]() in the Electronic Bill of Lading Interface Standard (IFS) document) a `ShipmentEvent` is created with the status `REJE` (Rejected):
              ```
              {
                metadata: {
                  { ---metadata fields omitted for clarity--- }
                },
                payload: {
                  eventClassifierCode: 'ACT',
                  eventDateTime: { ---now--- },
                  shipmentEventTypeCode: 'REJE',
                  documentTypeCode: 'CBR'
                  documentReference: 'cbr-123',
                  reason: 'The Booking request has been rejeted due to inactivity during the last 30 days'
                }
              }
              ```
        6. A `201` (Created) response is returned with the following payload (`documentStatus` can also be `DRFT` - `PENU` used in the example)
            ```
            {
              shippingInstructionReference: 'si-123',
              documentStatus: 'PENU'
            }
            ```
        
        For a full validation the `POST` Shipping Instruction ends here. The Shipping Instruction
            
        - is now stored in the provider system
        - a `ShipmentEvent` with status `RECE` (Received) has been created
        - a full validation has been done
        - a second `ShipmentEvent` is created with one of the following statuses:
          - `PENU` (Pending Update) in case provider awaits further input from consumer
          - `DRFT` (Drafted) in case provider has accepted the Shipping Instruction and a Transport Document has been drafted
          - `REJE ??` (Rejected) in case the provider has rejected the Shipping Instruction.
        - a `201` (Created) response is sent to the consumer with a payload containing the `documentStatus` of the second `ShipmentEvent`
          
        Any further communication from provider to consumer will be done via `ShipmentEvents` and can be monitored by the consumer on the

            GET /v2/events
        endPoint.
      parameters:
        - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.1.0#/components/parameters/Api-Version-Major'
      requestBody:
        description: Parameters used to create the Shipping Instruction
        required: true
        content:
          application/json:
            schema:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DOCUMENTATION_DOMAIN/3.0.0#/components/schemas/shippingInstructionRequest'
      responses:
        '201':
          description: |
            Shipping Instruction has been successfully created in the provider system. Depending on the level of validation done by the provider - the status of the Shipping Instruction will be one of the following:
            - `RECE` (Received) in case asynchronous processing of the Shipping Instruction begins. The Shipping Instruction is now awaiting the provider to finish the validation
            - `PENU` (Pending Update) in case provider needs the Shipping Instruction to be updated and awaits further input from consumer
            - `DRFT` (Drafted) in case provider has accepted the Shipping Instruction and drafted a Transport Document
            - `REJE` (Rejected) in case the provider has rejected the Shipping Instruction. The Shipping Instruction can no longer be updated
            
            The status of the Shipping Instruction is communicated via `ShipmentEvent(s)` and can be monitored by the consumer on the
              
                GET /v2/events
              
              endPoint.
          headers:
            API-Version:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.1.0#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DOCUMENTATION_DOMAIN/3.0.0#/components/schemas/shippingInstructionRefStatus'
        default:
          description: Unexpected error
          headers:
            API-Version:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.1.0#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: 'https://api.swaggerhub.com/domains/dcsaorg/ERROR_DOMAIN/2.0.1#/components/schemas/error'
  /v3/shipping-instructions/{shippingInstructionReference}:
    get:
      tags:
       - Shipping Instructions
      summary: Get shipping instruction
      description: |
        Retrieves the Shipping Instruction with the `shippingInstructionReference` in the path.
      parameters:
        - $ref: '#/components/parameters/shippingInstructionReference'
        - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.1.0#/components/parameters/Api-Version-Major'
      responses:
        '200':
          description: Request successful
          headers:
            API-Version:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.1.0#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DOCUMENTATION_DOMAIN/3.0.0#/components/schemas/shippingInstructionResponse'
        default:
          description: Unexpected error
          headers:
            API-Version:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.1.0#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: 'https://api.swaggerhub.com/domains/dcsaorg/ERROR_DOMAIN/2.0.1#/components/schemas/error'
    put:
      tags:
       - Shipping Instructions
      summary: Put shipping instruction
      parameters:
        - $ref: '#/components/parameters/shippingInstructionReference'
        - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.1.0#/components/parameters/Api-Version-Major'
      description: |
        Updates a Shipping Instruction with the `shippingInstructionReference` in the path
      requestBody:
        description: Parameters used to update the shipping instruction
        required: true
        content:
          application/json:
            schema:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DOCUMENTATION_DOMAIN/3.0.0#/components/schemas/shippingInstruction'
      responses:
        '200':
          description: |
            Shipping Instruction update has been successfully received. Asynchronous processing will now begin. A `ShipmentEvent` will be created with the result of the processing once it is finished.
          headers:
            API-Version:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.1.0#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DOCUMENTATION_DOMAIN/3.0.0#/components/schemas/shippingInstructionRefStatus'
        default:
          description: Unexpected error
          headers:
            API-Version:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.1.0#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: 'https://api.swaggerhub.com/domains/dcsaorg/ERROR_DOMAIN/2.0.1#/components/schemas/error'
  /v3/transport-document-summaries:
    get:
      tags:
       - Transport Documents
      summary: Get Transport Documents
      description: |
        Retrieves Transport Document _metadata_

        If not specified - this list will be sorted by the time the `TransportDocument` was created (transportDocumentCreatedDateTime) in ascending (ASC) order.
      parameters:
        - $ref: '#/components/parameters/carrierBookingReferences'
        # - in: query
        #   name: carrierBookingReference
        #   description: |
        #     A set of unique characters provided by carrier to identify a booking confirmation.
            
        #     Specifying this filter will only return Transport Documents related to this particular `carrierBookingReference`.
        #   schema:
        #     $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.1.0#/components/schemas/carrierBookingReference'
        - $ref: '#/components/parameters/documentStatus'
        # - $ref: '#/components/parameters/equipmentReference'
        
        # - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.1.0#/components/parameters/cursor'
        # - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.1.0#/components/parameters/offset'
        - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.1.0#/components/parameters/limit'
        - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.1.0#/components/parameters/sort'
        - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.1.0#/components/parameters/Api-Version-Major'
      responses:
        '200':
          description: Request successful        
          headers:
            API-Version:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.1.0#/components/headers/API-Version'
            Current-Page:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.1.0#/components/headers/Current-Page'
            Next-Page:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.1.0#/components/headers/Next-Page'
            Prev-Page:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.1.0#/components/headers/Prev-Page'
            Last-Page:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.1.0#/components/headers/Last-Page'
            First-Page:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.1.0#/components/headers/First-Page'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DOCUMENTATION_DOMAIN/3.0.0#/components/schemas/transportDocumentSummary'
        default:
          description: Unexpected error
          headers:
            API-Version:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.1.0#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: 'https://api.swaggerhub.com/domains/dcsaorg/ERROR_DOMAIN/2.0.1#/components/schemas/error'
  /v3/transport-documents/{transportDocumentReference}:
    get:
      tags:
       - Transport Documents
      summary: Get Transport Document
      description: |
        Retrieves the Transport Document with the `transportDocumentReference` in the path.
      parameters:
        - $ref: '#/components/parameters/transportDocumentReference'
        - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.1.0#/components/parameters/Api-Version-Major'
      responses:
        '200':
          description: Request successful
          headers:
            API-Version:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.1.0#/components/headers/API-Version'
            # Document-Signature:
            #   schema:
            #     type: string
            #   description: The Carrier signature of the Transport Document
          content:
            application/json:
              schema:
                $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DOCUMENTATION_DOMAIN/3.0.0#/components/schemas/transportDocument'
        default:
          description: Unexpected error
          headers:
            API-Version:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.1.0#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: 'https://api.swaggerhub.com/domains/dcsaorg/ERROR_DOMAIN/2.0.1#/components/schemas/error'
    patch:
      tags:
       - Transport Documents
      summary: Approve a Transport Document.
      description: |
        Approves a Transport Document.
      parameters:
        - $ref: '#/components/parameters/transportDocumentReference'
        # - $ref: '#/components/parameters/documentSignature'
        - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.1.0#/components/parameters/Api-Version-Major'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              allOf:
                - type: object
                  properties:
                    documentStatus:
                      type: string
                      description: |
                        This changes the documentStatus to contain the value:
                        - APPR (Approved)
                      enum:
                        - APPR
                      example:
                        APPR
              required:
                - documentStatus
      responses:
        '200':
          description: The Transport Document
          headers:
            API-Version:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.1.0#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DOCUMENTATION_DOMAIN/3.0.0#/components/schemas/transportDocumentRefStatus'
        default:
          description: Unexpected error
          headers:
            API-Version:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.1.0#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: 'https://api.swaggerhub.com/domains/dcsaorg/ERROR_DOMAIN/2.0.1#/components/schemas/error'
  /v3/events/:
    get:
      tags:
       - Bill of Lading Events
      summary: Get Shipment events
      description: |
        Retrieves `Bill of Lading` related `Shipment Events`.
        
        
        If not specified - this list will be sorted by the time the `ShipmentEvent` was created (eventCreatedDateTime) in ascending (ASC) order.
        The default sort order is by _eventCreatedDateTime_ in ascending order (`ASC`)
      parameters:
        # Chunk with specialized booking related ShipmentEvent parameters
        - $ref: '#/components/parameters/shipmentEventTypeCodes'
        - $ref: '#/components/parameters/documentTypeCodes'
        - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/EVENT_DOMAIN/3.2.0#/components/parameters/documentReference'
        
        - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/EVENT_DOMAIN/3.2.0#/components/parameters/equipmentReference'

        # Chunk with base event parameters
        - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/EVENT_DOMAIN/3.2.0#/components/parameters/eventCreatedDateTime'
        - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/EVENT_DOMAIN/3.2.0#/components/parameters/eventDateTime'

        # Chunk with Global related event parameters
        # - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.1.0#/components/parameters/cursor'
        # - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.1.0#/components/parameters/offset'
        - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.1.0#/components/parameters/limit'
        - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.1.0#/components/parameters/sort'
        - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.1.0#/components/parameters/Api-Version-Major'
      responses:
        '200':
          description: Request successful
          headers:
            API-Version:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.1.0#/components/headers/API-Version'
            Current-Page:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.1.0#/components/headers/Current-Page'
            Next-Page:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.1.0#/components/headers/Next-Page'
            Prev-Page:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.1.0#/components/headers/Prev-Page'
            Last-Page:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.1.0#/components/headers/Last-Page'
            First-Page:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.1.0#/components/headers/First-Page'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'https://api.swaggerhub.com/domains/dcsaorg/EVENT_DOMAIN/3.2.0#/components/schemas/shipmentEvent'
        default:
          description: Unexpected error
          headers:
            API-Version:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.1.0#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: 'https://api.swaggerhub.com/domains/dcsaorg/ERROR_DOMAIN/2.0.1#/components/schemas/error'

components:
  parameters:
  
    #############
    # Path params
    #############
    
    shippingInstructionReference:
      in: path
      name: shippingInstructionReference
      description: |
        The identifier for a shipping instruction provided by the carrier
      schema:
        $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.1.0#/components/schemas/shippingInstructionReference'
      required: true
    transportDocumentReference:
      in: path
      name: transportDocumentReference
      description: |
        The transportDocumentReference of the Transport Document
      required: true
      schema:
        $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.1.0#/components/schemas/transportDocumentReference'

    ##############
    # Query params
    ##############
    
    carrierBookingReferences:
      in: query
      name: carrierBookingReference
      explode: false
      style: form
      description: |
        The bookingReference in the Bill of Lading process to filter by.

        It is possible to insert multiple values by comma `,` separating them. For multiple values the OR-operator is used. For example _carrierBookingReference=ABC123123,DEF987987_  Matches **both** documents connected to booking with reference `ABC123123` and booking with reference `DEF987987`.
      example: [ABC123123,DEF987987]
      schema:
        type: array
        items:
          $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.1.0#/components/schemas/carrierBookingReference'
    documentReference:
      in: query
      name: documentReference
      description: |
        A set of unique characters to identify a resource. Specifying this filter will only return events related to this particular `documentReference`. The `documentReference` can point to a Shipping Instruction (`SHI`) or to a Transport Document (`TRD`)
      schema:
        $ref: 'https://api.swaggerhub.com/domains/dcsaorg/EVENT_DOMAIN/3.2.0#/components/schemas/documentReference'
    documentStatus:
      in: query
      name: documentStatus
      description: |
        Filter by the status of the Shipping Instruction in the process. Possible values are:
        - RECE (Received)
        - PENU (Pending Update)
        - DRAFT (Draft)
        - PENA (Pending Approval)
        - APPR (Approved)
        - ISSU (Issued)
        - SURR (Surrendered)
        - VOID (Void)

        More details can be found on <a href="https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/shipmenteventtypecodes.csv">GitHub</a>. Be aware that the list linked to is the `ShipmentEventTypeCodes` which is equivalent to `documentStatus`, the list is a subset of the possible values.
      schema:
        $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DOCUMENTATION_DOMAIN/3.0.0#/components/schemas/eblShipmentEventTypeCode'
    documentTypeCodes:
      in: query
      name: documentTypeCode
      explode: false
      style: form
      description: |
        The `documentTypeCode` to filter by. Possible values are
        - SHI (Shipping Instruction)
        - TRD (Transport Document)

        It is possible to select multiple values by comma `,` separating them. For multiple values the OR-operator is used. For example _documentTypeCode=SHI,TRD_ Matches **both** `ShipmentEvents` related to Shipping Instructions (`SHI`) and Transport Documents (`TRD`).

        More details can be found on <a href="https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/documenttypecodes.csv">GitHub</a>. Be aware that the list provided here is a subset of the possible values.        
      example: SHI
      schema:
        default: [SHI,TRD]
        type: array
        items:
          $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DOCUMENTATION_DOMAIN/3.0.0#/components/schemas/eblDocumentTypeCode'
    # equipmentReference:
    #   in: query
    #   name: equipmentReference
    #   description: |
    #     Filter by the unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible.
    #     According to ISO 6346, a container identification code consists of a 4-letter prefix and a 7-digit number (composed of a 3-letter owner code, a category identifier, a serial number, and a check-digit). If a container does not comply with ISO 6346, it is suggested to follow Recommendation #2 “Container with non-ISO identification” from SMDG.
    #   schema:
    #     $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.1.0#/components/schemas/equipmentReference'
    shipmentEventTypeCodes:
      in: query
      name: shipmentEventTypeCode
      explode: false
      style: form
      description: |
        The status of the document in the Bill of Lading process to filter by. Possible values are
        - RECE (Received)
        - PENU (Pending Update)
        - DRAFT (Draft)
        - PENA (Pending Approval)
        - APPR (Approved)
        - ISSU (Issued)
        - SURR (Surrendered)
        - VOID (Void)

        It is possible to select multiple values by comma `,` separating them. For multiple values the OR-operator is used. For example _shipmentEventTypeCode=RECE,ISSU_  Matches **both** Received (`RECE`) and Issued (`ISSU`) `ShipmentEvents`.

        More details can be found on <a href="https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/shipmenteventtypecodes.csv">GitHub</a>. Be aware that the list provided here is a subset of the possible values.
      example: [RECE,ISSU]
      schema:
        default: [RECE,PENU,DRFT,PENA,APPR,ISSU,SURR,VOID]
        type: array
        items:
          $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DOCUMENTATION_DOMAIN/3.0.0#/components/schemas/eblShipmentEventTypeCode'
