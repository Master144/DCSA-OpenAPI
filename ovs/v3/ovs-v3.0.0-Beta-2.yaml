openapi: 3.0.3
info:
  title: DCSA OpenAPI specification for Operational Vessel Schedules
  description: |
    API specification issued by DCSA.org

    This API supports <b>OVS</b> (Operational Vessel Schedules)

    OVS is used for sharing Vessel schedules. The Interface Standards for OVS can be read [here](https://dcsa.my.salesforce.com/sfc/p/#2o000000YvHJ/a/7T000000Daei/T7rrx6vrU0bpqX5EFaJGFtFrqgJ73yzxclN9IS8qRao).

    All other documents related to the Operational Vessel Schedule publication can be found [here](https://knowledge.dcsa.org/s/publication?publicationId=a0r7T000000UYBOQA4)

    For explanation to specific values or objects please refer to the Information Model v2022.2 *** Will be updated ***

    For a changelog please click [here](https://github.com/dcsaorg/DCSA-OpenAPI/blob/master/ovs/v3#v300B1). Please also [create a GitHub issue](https://github.com/dcsaorg/DCSA-OpenAPI/issues/new) if you have any questions/comments.
  contact:
    name: Digital Container Shipping Association (DCSA)
    url: 'https://dcsa.org'
    email: info@dcsa.org
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  version: 3.0.0-Beta-2
servers:
  - url: /
tags:
  - name: Operational Vessel Schedules
    description: Operational Vessel Schedules operations
paths:
  /v3/service-schedules:
    get:
      tags:
        - Operational Vessel Schedules
      summary: Get a list of Schedules
      description: |
        Get a list of service schedules. The result is `Vessel-Centric` - this means that the `Vessel` is in the top of the hierarchy of the response structure. A service is a heirarchical structure with the following elements:
        - One or more `Services` which can contain one or more `Vessels`
        - A `Vessel` which can call multiple `Ports` (`TransportCalls`).
        - A `Port` (`TransportCall`) can contain one or more `TimeStamps`.

        The number of service schedules in the list can be narrowed down by providing filter parameters. The resulting payload will always include **entire voyage(s) being matched**. This means that even though a filter only matches a single `Port` in a `Voyage` or a single `Timestamp` within a `Port` in a `Voyage` - **the entire Voyage matched** is returned. If the `carrierImportVoyageNumber` of the `Port` differs from the `carrierExportVoyageNumber` of the `Port` then the **entire Voyage** for both these Voyage numbers are included.

        An example of this is when `&UNLocationCode=DEHAM` is used as a filter parameter. In this case **entire Voyages** would be listed where `DEHAM` is a `Port`.

        Be aware that it is possible to specify filters that are mutially exclusive resulting in an empty response list. An example of this could be when both using `vesselIMONumber` and `vesselName` filters at the same time:

            &vesselIMONumber=9321483&vesselName=King of the Seas
            
        If no `Vessel` exists where `vesselIMONumber` is **9321483** and `vesselName` is **King of the Seas** then the result will be an empty list

        If no `startDate` filter is provided then **3 months** prior to the request data is used. If no `endDate` filters is provided then **6 months** after the request date is used.
      parameters:
        - name: carrierServiceCode
          in: query
          description: |
            The carrier specific service code to filter by. The result will only return schedules including the service code
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/carrierServiceCode'
        - name: universalServiceReference
          in: query
          description: |
            The **U**niversal **S**ervice **R**eference (`USR`) as defined by **DCSA** to filter by. The service code must match the regular expression pattern: `SR\d{5}[A-Z]`. The letters `SR` followed by `5 digits`, followed by a checksum-character as a capital letter from `A to Z`. The result will only return schedules including the service reference
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/universalServiceReference'
        - name: vesselIMONumber
          in: query
          description: |
            The identifier of a vessel. The result will only return schedules including the vessel with the specified IMO number.

            It is not a requirement for dummy vessels to have an `IMO Number`. In this case filtering by `vesselName` should be used.
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/vesselIMONumber_1'
        - name: vesselName
          in: query
          description: |
            The name of a vessel. The result will only return schedules including the vessel with the specified name.

            Be aware that the `vesselName` is not unique and might match multiple vessels. If possible, filtering by `IMO Number` is preferred.

            In case of dummy vessels an `IMO Number` might not exist in which case this filter is to be used.
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/vesselName'
        - name: carrierVoyageNumber
          in: query
          description: |
            The carrier specific identifier of a `Voyage` - can be both **importVoyageNumber** and **exportVoyageNumber**. The result will only return schedules including the `Ports` where `carrierVoyageNumber` is either `carrierImportVoyageNumber` or `carrierExportVoyageNumber`
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/carrierVoyageNumber'
        - name: universalVoyageReference
          in: query
          description: |
            The Universal Reference of a `Voyage` - can be both **importUniversalVoyageReference** and **exportUniversalVoyageReference**. The result will only return schedules including the `Ports` where `universalVoyageReference` is either `importUniversalVoyageReference` or `exportUniversalVoyageReference`
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/universalVoyageReference'
        - name: UNLocationCode
          in: query
          description: |
            The `UN Location Code` specifying where a port is located.

            Specifying this filter will only return schedules including **entire Voyages** related to this particular `UN Location Code`.
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/UNLocationCode'
          example: NLRTM
        - name: facilitySMDGCode
          in: query
          description: |
            The `facilitySMDGCode` specifying a specific facility (using SMDG Code). Be aware that the `facilitySMDGCode` does not contain a `UNLocationCode` - this must be specified in the `UNLocationCode` filter.

            Specifying this filter will only return schedules including **entire Voyages** related to this particular `facilitySMDGCode`.
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/facilityCode'
          example: APM
        - name: startDate
          in: query
          description: |
            The start date of the period for which schedule information is requested. If a date of any Timestamp (`ATA`, `ETA` or `PTA`) inside a `PortCall` matches a date on or after (`≥`) the `startDate` the **entire Voyage** (import- and export-Voyage) matching the `PortCall` will be included in the result. All matching is done towards local Date at the place of the port call.

            If this filter is not provided the default value is **3 months** prior to request time.

            The value is populated in `ISO 8601` date format.
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/startDate'
        - name: endDate
          in: query
          description: |
            The end date of the period for which schedule information is requested. If a date of any Timestamp (`ATA`, `ETA` or `PTA`) inside a `PortCall` matches a date on or before (`≤`) the `endDate` the **entire Voyage**(import- and export-Voyage) matching the `PortCall` will be included in the result. All matching is done towards local Date at the place of the port call.

            If this filter is not provided the default value is **6 months** after request time.

            The value is populated in `ISO 8601` date format.
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/startDate'
        - name: limit
          in: query
          description: |
            Maximum number of items to return.
          required: false
          schema:
            minimum: 1
            type: integer
            format: int32
            default: 100
          example: 100
        - $ref: ../../models/APIVersionHeader.yaml
      responses:
        '200':
          description: Schedule successfully posted
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/serviceSchedule'
        default:
          description: Unexpected error
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
components:
  schemas:
    serviceSchedule:
      required:
        - carrierServiceName
      type: object
      properties:
        carrierServiceName:
          $ref: '#/components/schemas/carrierServiceName'
        carrierServiceCode:
          $ref: '#/components/schemas/carrierServiceCode'
        universalServiceReference:
          $ref: '#/components/schemas/universalServiceReference'
        vesselSchedules:
          type: array
          items:
            $ref: '#/components/schemas/vesselSchedule'
    vesselSchedule:
      required:
        - isDummyVessel
        - vesselOperatorSMDGLinerCode
      type: object
      properties:
        vesselOperatorSMDGLinerCode:
          $ref: '#/components/schemas/vesselOperatorSMDGLinerCode'
        vesselIMONumber:
          $ref: '#/components/schemas/vesselIMONumber'
        vesselName:
          $ref: '#/components/schemas/vesselName'
        vesselCallSign:
          $ref: '#/components/schemas/vesselCallSign'
        isDummyVessel:
          $ref: '#/components/schemas/isDummyVessel'
        transportCalls:
          type: array
          items:
            $ref: '#/components/schemas/transportCall'
    transportCall:
      required:
        - carrierImportVoyageNumber
        - transportCallReference
      type: object
      properties:
        portVisitReference:
          $ref: '#/components/schemas/portVisitReference'
        transportCallReference:
          $ref: '#/components/schemas/transportCallReference'
        carrierImportVoyageNumber:
          $ref: '#/components/schemas/carrierImportVoyageNumber'
        carrierExportVoyageNumber:
          $ref: '#/components/schemas/carrierExportVoyageNumber'
        universalImportVoyageReference:
          $ref: '#/components/schemas/universalImportVoyageReference'
        universalExportVoyageReference:
          $ref: '#/components/schemas/universalExportVoyageReference'
        location:
          $ref: '#/components/schemas/location'
        statusCode:
          $ref: '#/components/schemas/statusCode'
        timestamps:
          type: array
          items:
            $ref: '#/components/schemas/timestamp'
      description: |
        A transportCall in the schedule. A transportCall can be either just a Port or further specified as a terminalCall.

        The order of the list is the sequence of the list
    timestamp:
      required:
        - eventClassifierCode
        - eventDateTime
        - eventTypeCode
      type: object
      properties:
        eventTypeCode:
          $ref: '#/components/schemas/transportEventTypeCode'
        eventClassifierCode:
          $ref: '#/components/schemas/eventClassifierCode'
        eventDateTime:
          $ref: '#/components/schemas/eventDateTime'
        delayReasonCode:
          $ref: '#/components/schemas/delayReasonCode'
        changeRemark:
          $ref: '#/components/schemas/changeRemark'
      description: |
        A timestamp for a port
    location:
      type: object
      description: |
        General purpose object to capture location-related data, the location can be specified in **one** of the following ways: `UN Location Code`, a `Facility` or an `Address`.
      example:
        locationType: FACS
        UNLocationCode: NLRTM
        facilitySMDGCode: RWG
      discriminator:
        propertyName: locationType
        mapping:
          UNLO: '#/components/schemas/unLocationLocation'
          FACS: '#/components/schemas/facilitySMDGLocation'
          ADDR: '#/components/schemas/addressLocation'
      oneOf:
        - $ref: '#/components/schemas/unLocationLocation'
        - $ref: '#/components/schemas/facilitySMDGLocation'
        - $ref: '#/components/schemas/addressLocation'
    isDummyVessel:
      type: boolean
      description: |
        Is this a dummy vessel. In case no vessel has been asigned yet - this property can be set to `true` indicating that the vesselIMONumber does not exist.
    carrierServiceName:
      maxLength: 50
      type: string
      description: |
        The name of the service 
      example: Great Lion Service
    eventClassifierCode:
      type: string
      description: |
        Code for the event classifier. Values can vary depending on eventType
      example: EST
      enum:
        - ACT
        - EST
        - PLN
    eventDateTime:
      type: string
      description: |
        Time in the timstamp
      format: date-time
      example: '2025-01-14T09:21:00+01:00'
    statusCode:
      type: string
      description: |
        The set of codes in `Status Code` are ONLY meant to communicate any change / exception to the published schedule. This is not required in case of normal schedule. Possible values are:

        - OMIT (Omit)
        - BLNK (Blank)
        - ADHO (Ad Hoc)
        - PHOT (Phase Out)
        - PHIN (Phase In)
        - SLID (Sliding)
        - ROTC (Rotation Change)
        - CUTR (Cut and Run)

        More details can be found on [GitHub](https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/portcallstatuscodes.csv)
      example: OMIT
      enum:
        - OMIT
        - PHIN
        - PHOT
        - ADHO
        - BLNK
        - SLID
        - ROTC
        - CUTR
    transportCallReference:
      maxLength: 100
      pattern: ^\S+(\s+\S+)*$
      type: string
      description: |
        The unique reference for a transport call. It’s the vessel operator responsibility to provide the Transport Call Reference, other parties are obliged to pick it up and use it. 
      example: .inf
    vesselIMONumber:
      maxLength: 7
      pattern: '^\d{7}$'
      type: string
      description: |
        The unique reference for a registered Vessel. The reference is the International Maritime Organisation (IMO) number, also sometimes known as the Lloyd&apos;s register code, which does not change during the lifetime of the vessel

        **Condition**: If the vessel is not dummy, there needs to be an IMO. If the vessel is dummy, the IMO is optional. 
      example: '9321483'
    carrierServiceCode:
      maxLength: 11
      pattern: ^\S+(\s+\S+)*$
      type: string
      description: |
        The carrier-specific code of the service for which the schedule details are published.
      example: FE1
    universalServiceReference:
      maxLength: 8
      pattern: '^SR\d{5}[A-Z]$'
      type: string
      description: |
        A global unique service reference, as per DCSA standard, agreed by VSA partners for the service. The service reference must match the regular expression pattern: `SR\d{5}[A-Z]`. The letters `SR` followed by `5 digits`, followed by a checksum-character as a capital letter from `A to Z`.
      example: SR12345A
    vesselIMONumber_1:
      maxLength: 7
      pattern: '^\d{7}$'
      type: string
      description: |
        The unique reference for a registered Vessel. The reference is the International Maritime Organisation (IMO) number, also sometimes known as the Lloyd&apos;s register code, which does not change during the lifetime of the vessel
      example: '9321483'
    vesselName:
      maxLength: 35
      pattern: ^\S+(\s+\S+)*$
      type: string
      description: |
        The name of the Vessel given by the Vessel Operator and registered with IMO.
      example: King of the Seas
    carrierVoyageNumber:
      maxLength: 50
      pattern: ^\S+(\s+\S+)*$
      type: string
      description: |
        The carrier-specific identifier of the Voyage.
      example: 2103S
    universalVoyageReference:
      pattern: '^\d{2}[0-9A-Z]{2}[NEWSR]$'
      type: string
      description: |
        A global unique voyage reference, as per DCSA standard, agreed by VSA partners for the voyage. The voyage reference must match the regular expression pattern: `\d{2}[0-9A-Z]{2}[NEWSR]`
        - `2 digits` for the year
        - `2 alphanumeric characters` for the sequence number of the voyage
        - `1 character` for the direction/haul (`N`orth, `E`ast, `W`est, `S`outh or `R`oundtrip).
      example: 2201N
    UNLocationCode:
      maxLength: 5
      minLength: 5
      pattern: '^[A-Z]{2}[A-Z2-9]{3}$'
      type: string
      description: |
        The UN Location code specifying where the place is located. The pattern used must be
        - 2 characters for the country code using [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
        - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used

        More info can be found here:  [UN/LOCODE](https://en.wikipedia.org/wiki/UN/LOCODE)
      example: FRPAR
    facilityCode:
      maxLength: 6
      pattern: ^\S+(\s+\S+)*$
      type: string
      description: |
        The code used for identifying the specific facility. This code does <b>not</b> include the UN Location Code.
      nullable: false
      example: ADT
    startDate:
      type: string
      description: 'The start date of the period for which schedule information is sent. The value is populated in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) Date format.'
      format: date
      example: '2020-04-06'
    error:
      required:
        - errorDateTime
        - errors
        - httpMethod
        - requestUri
        - statusCode
        - statusCodeText
      type: object
      properties:
        httpMethod:
          type: string
          description: |
            The http request method type e.g. GET, POST
          example: POST
          enum:
            - GET
            - HEAD
            - POST
            - PUT
            - DELETE
            - OPTION
            - PATCH
        requestUri:
          type: string
          description: |
            The request URI as it was sent
          example: /v1/events
        statusCode:
          type: integer
          description: |
            The HTTP status code
          format: int32
          example: 400
        statusCodeText:
          maxLength: 50
          type: string
          description: |
            The textual representation of the status code
          example: Bad Request
        errorMessage:
          maxLength: 200
          type: string
          description: |
            Other error information
          example: The supplied data could not be accepted
        providerCorrelationID:
          maxLength: 100
          type: string
          description: |
            A unique identifier for the transaction, e.g. a UUID
          example: 4426d965-0dd8-4005-8c63-dc68b01c4962
        errorDateTime:
          type: string
          description: |
            The date and time (in ISO 8601 format) the error occurred.
          format: date-time
          example: '2019-11-12T07:41:00+08:30'
        errors:
          minItems: 1
          type: array
          description: |
            List of detailed errors, e.g. fields that could not pass validation
          items:
            allOf:
              - $ref: '#/components/schemas/detailedError'
    detailedError:
      required:
        - message
        - reason
      type: object
      properties:
        errorCode:
          maximum: 9999
          minimum: 7000
          type: integer
          description: |
            Standard error code see http://dcsa.org/error-codes (to be created). Examples: 7003 – out or range value, 7004 -  invalid type
          format: int32
          example: 7003
        field:
          maxLength: 500
          type: string
          description: |
            The field that caused the error, e.g. a failed validation. The field can be expressed as a [JSONpath](https://github.com/json-path/JsonPath)
          example: location.facilityCode
        value:
          maxLength: 500
          type: string
          description: |
            The value of the field that caused the error
          example: SG SIN WHS
        reason:
          maxLength: 100
          type: string
          description: |
            High level error message
          example: invalidData
        message:
          maxLength: 200
          type: string
          description: |
            Additional information as to why the error occured
          example: Spaces not allowed in facility code
    vesselOperatorSMDGLinerCode:
      maxLength: 10
      pattern: ^\S+(\s+\S+)*$
      type: string
      description: |
        The carrier who is in charge of the vessel operation based on the SMDG code
      nullable: false
      example: HLC
    vesselCallSign:
      maxLength: 10
      pattern: ^\S+(\s+\S+)*$
      type: string
      description: |
        A unique alphanumeric identity that belongs to the vessel and is assigned by the International Telecommunication Union (ITU). It consists of a threeletter alphanumeric prefix that indicates nationality, followed by one to four characters to identify the individual vessel. For instance, vessels registered under Denmark are assigned the prefix ranges 5PA-5QZ, OUAOZZ, and XPA-XPZ. The Call Sign changes whenever a vessel changes its flag.
      example: NCVV
    portVisitReference:
      maxLength: 50
      pattern: ^\S+(\s+\S+)*$
      type: string
      description: |
        The unique reference that can be used to link different `transportCallReferences` to the same port visit. The reference is provided by the port to uniquely identify a port call
      example: NLRTM1234589
    carrierImportVoyageNumber:
      maxLength: 50
      pattern: ^\S+(\s+\S+)*$
      type: string
      description: |
        The identifier of an import voyage. The carrier-specific identifier of the import Voyage.
      example: 2103N
    carrierExportVoyageNumber:
      maxLength: 50
      pattern: ^\S+(\s+\S+)*$
      type: string
      description: |
        The identifier of an export voyage. The carrier-specific identifier of the export Voyage.
      example: 2103S
    universalImportVoyageReference:
      pattern: '^\d{2}[0-9A-Z]{2}[NEWSR]$'
      type: string
      description: |
        A global unique voyage reference for the import Voyage, as per DCSA standard, agreed by VSA partners for the voyage. The voyage reference must match the regular expression pattern: `\d{2}[0-9A-Z]{2}[NEWSR]`
        - `2 digits` for the year
        - `2 alphanumeric characters` for the sequence number of the voyage
        - `1 character` for the direction/haul (`N`orth, `E`ast, `W`est, `S`outh or `R`oundtrip).
      example: 2103N
    universalExportVoyageReference:
      pattern: '^\d{2}[0-9A-Z]{2}[NEWSR]$'
      type: string
      description: |
        A global unique voyage reference for the export Voyage, as per DCSA standard, agreed by VSA partners for the voyage. The voyage reference must match the regular expression pattern: `\d{2}[0-9A-Z]{2}[NEWSR]`
        - `2 digits` for the year
        - `2 alphanumeric characters` for the sequence number of the voyage
        - `1 character` for the direction/haul (`N`orth, `E`ast, `W`est, `S`outh or `R`oundtrip).
      example: 2103N
    transportEventTypeCode:
      type: string
      description: |
        Identifier for type of `transportEvent`
        - ARRI (Arrived)
        - DEPA (Departed)

        More details can be found on <a href="https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/transporteventtypecodes.csv">GitHub</a>
      example: ARRI
      enum:
        - ARRI
        - DEPA
    delayReasonCode:
      maxLength: 3
      pattern: ^\S+(\s+\S+)*$
      type: string
      description: |
        Reason code for the delay. See SMDG [Code list DELAY](https://smdg.org/documents/smdg-code-lists/delay-reason-and-port-call-activity/) for a list of valid codes to be used for this attribute.
      example: WEA
    changeRemark:
      maxLength: 250
      type: string
      description: |
        Free text field to provide information as to why the `TransportEvent` was sent
      example: Bad weather
    unLocationLocation:
      required:
        - UNLocationCode
        - locationType
      type: object
      properties:
        locationName:
          $ref: '#/components/schemas/locationName'
        locationType:
          type: string
          description: |
            Discriminator used to identify this as a `UNLocation` location interface
          example: UNLO
          enum:
            - UNLO
        UNLocationCode:
          $ref: '#/components/schemas/UNLocationCode'
      description: |
        An interface used to express a location using a `Un Location Code`
    locationName:
      maxLength: 100
      pattern: ^\S+(\s+\S+)*$
      type: string
      description: |
        The name of the location.
      example: Port of Amsterdam
    facilitySMDGLocation:
      required:
        - UNLocationCode
        - facilitySMDGCode
        - locationType
      type: object
      properties:
        locationName:
          $ref: '#/components/schemas/locationName'
        locationType:
          type: string
          description: |
            Discriminator used to identify this as a `Facility Location` interface only using `SMDG` code list
          example: FACS
          enum:
            - FACS
        UNLocationCode:
          $ref: '#/components/schemas/UNLocationCode'
        facilitySMDGCode:
          allOf:
            - $ref: '#/components/schemas/facilityCode'
            - description: |
                The code used for identifying the specific facility. This code does not include the UN Location Code.

                The codeList used by `SMDG` is the [SMDG Terminal Code List](https://smdg.org/wp-content/uploads/Codelists/Terminals/SMDG-Terminal-Code-List-v20210401.xlsx)
      description: |
        An interface used to express a location using a `Facility` by the `SMDG` code list. The `facilitySMDGCode` does not contain the `UNLocationCode` - this should be provided in the `UnLocationCode` attribute.
    addressLocation:
      required:
        - address
        - locationType
      type: object
      properties:
        locationName:
          $ref: '#/components/schemas/locationName'
        locationType:
          type: string
          description: |
            Discriminator used to identify this as a `Address Location` interface
          example: ADDR
          enum:
            - ADDR
        address:
          $ref: '#/components/schemas/address'
      description: |
        An interface used to express a location using an `Address` object
    address:
      required:
        - country
        - name
      type: object
      properties:
        name:
          $ref: '#/components/schemas/addressName'
        street:
          $ref: '#/components/schemas/streetName'
        streetNumber:
          $ref: '#/components/schemas/streetNumber'
        floor:
          $ref: '#/components/schemas/floor'
        postCode:
          $ref: '#/components/schemas/postCode'
        city:
          $ref: '#/components/schemas/cityName'
        stateRegion:
          $ref: '#/components/schemas/stateRegion'
        country:
          $ref: '#/components/schemas/country'
      description: |
        An object for storing address related information
    addressName:
      maxLength: 100
      pattern: ^\S+(\s+\S+)*$
      type: string
      description: |
        Name of the address
      example: Henrik
    streetName:
      maxLength: 100
      type: string
      description: The name of the street of the party’s address.
      example: Kronprinsessegade
    streetNumber:
      maxLength: 50
      type: string
      description: The number of the street of the party’s address.
      example: '54'
    floor:
      maxLength: 50
      pattern: ^\S+(\s+\S+)*$
      type: string
      description: |
        The floor of the party’s street number.
      example: 5. sal
    postCode:
      maxLength: 50
      type: string
      description: The post code of the party’s address.
      example: '1306'
    cityName:
      maxLength: 65
      pattern: ^\S+(\s+\S+)*$
      type: string
      description: |
        The city name of the party’s address.
      example: København
    stateRegion:
      maxLength: 65
      type: string
      description: The state/region of the party’s address.
      nullable: true
      example: Copenhagen
    country:
      maxLength: 75
      pattern: ^\S+(\s+\S+)*$
      type: string
      description: |
        The country of the party’s address.
      example: Denmark
  parameters:
    Api-Version-Major:
      name: API-Version
      in: header
      description: |
        An API-Version header MAY be added to the request (optional); if added it MUST only contain MAJOR version. API-Version header MUST be aligned with the URI version.
      required: false
      style: simple
      explode: false
      schema:
        type: string
        example: '3'
    endDate:
      name: endDate
      in: query
      description: |
        The end date of the period for which schedule information is requested. If a date of any Timestamp (`ATA`, `ETA` or `PTA`) inside a `PortCall` matches a date on or before (`≤`) the `endDate` the **entire Voyage**(import- and export-Voyage) matching the `PortCall` will be included in the result. All matching is done towards local Date at the place of the port call.

        If this filter is not provided the default value is **6 months** after request time.

        The value is populated in `ISO 8601` date format.
      required: false
      style: form
      explode: true
      schema:
        $ref: '#/components/schemas/startDate'
    startDate:
      name: startDate
      in: query
      description: |
        The start date of the period for which schedule information is requested. If a date of any Timestamp (`ATA`, `ETA` or `PTA`) inside a `PortCall` matches a date on or after (`≥`) the `startDate` the **entire Voyage** (import- and export-Voyage) matching the `PortCall` will be included in the result. All matching is done towards local Date at the place of the port call.

        If this filter is not provided the default value is **3 months** prior to request time.

        The value is populated in `ISO 8601` date format.
      required: false
      style: form
      explode: true
      schema:
        $ref: '#/components/schemas/startDate'
    limit:
      name: limit
      in: query
      description: |
        Maximum number of items to return.
      required: false
      schema:
        minimum: 1
        type: integer
        format: int32
        default: 100
      example: 100
  headers:
    API-Version:
      description: SemVer used to indicate the version of the contract (API version) returned.
      style: simple
      explode: false
      schema:
        type: string
        example: 3.0.0
