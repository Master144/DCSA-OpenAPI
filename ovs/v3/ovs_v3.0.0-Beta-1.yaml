openapi: 3.0.3
info:
  version: 3.0.0-Beta-1
  title: 'DCSA OpenAPI specification for Operational Vessel Schedules'
  description: |
    API specification issued by DCSA.org
    
    This API supports <b>OVS</b> (Operational Vessel Schedules)
    
    OVS is used for sharing Vessel schedules. The Interface Standards for OVS can be read *** [here](https://dcsa.org/wp-content/uploads/2020/07/DCSA-Interface-Standard-for-Operational-Vessel-Schedules-1.0-vF.pdf) ***(Needs to be updated).

    For explanation to specific values or objects please refer to the Information Model v2022.2 *** Will be updated early July ***

    For a changelog please click [here](https://github.com/dcsaorg/DCSA-OpenAPI/blob/master/ovs/v3#v300). Please also [create a GitHub issue](https://github.com/dcsaorg/DCSA-OpenAPI/issues/new) if you have any questions/comments.

  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  contact:
    name: Digital Container Shipping Association (DCSA)
    url: https://dcsa.org
    email: info@dcsa.org
tags:
  - name: Operational Vessel Schedules
    description: Operational Vessel Schedules operations
  # - name: Events
paths:
  /v3/service-schedules:
    get:
      tags:
        - Operational Vessel Schedules
      summary: Get a list of Schedules
      description: |
        Get a list of service schedules. The result is `Vessel-Centric` - this means that the `Vessel` is in the top of the hierarchy of the response structure. A service is a heirarchical structure with the following elements:
        - One or more `Services` which can contain one or more `Vessels`
        - A `Vessel` which can call multiple `Ports` (`TransportCalls`).
        - A `Port` (`TransportCall`) can contain one or more `TimeStamps`.

        The number of service schedules in the list can be narrowed down by providing filter parameters. The resulting payload will always include **entire voyage(s) being matched**. This means that even though a filter only matches a single `Port` in a `Voyage` or a single `Timestamp` within a `Port` in a `Voyage` - **the entire Voyage matched** is returned. If the `carrierImportVoyageNumber` of the `Port` differs from the `carrierExportVoyageNumber` of the `Port` then the **entire Voyage** for both these Voyage numbers are included.
        
        An example of this is when `&UNLocationCode=DEHAM` is used as a filter parameter. In this case **entire Voyages** would be listed where `DEHAM` is a `Port`.
        
        Be aware that it is possible to specify filters that are mutually exclusive resulting in an empty response list. An example of this could be when both using `vesselIMONumber` and `vesselName` filters at the same time:
        
            &vesselIMONumber=9321483&vesselName=King of the Seas
            
        If no `Vessel` exists where `vesselIMONumber` is **9321483** and `vesselName` is **King of the Seas** then the result will be an empty list
        
        If no `startDate` filter is provided then **3 months** prior to the request data is used. If no `endDate` filters is provided then **6 months** after the request date is used.
      parameters:
        - in: query
          name: carrierServiceCode
          description: |
            The internal carrier service code to filter by. The result will only return schedules including the service code
          schema:
            $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.1#/components/schemas/carrierServiceCode'
        - in: query
          name: universalServiceReference
          description: |
            The **U**niversal **S**ervice **R**eference (`USR`) as defined by **DCSA** to filter by. The service code must match the regular expression pattern: `SR\d{5}[A-Z]`. The letters `SR` followed by `5 digits`, followed by a checksum-character as a capital letter from `A to Z`. The result will only return schedules including the service reference
          schema:
            $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.1#/components/schemas/universalServiceReference'
        - in: query
          name: vesselIMONumber
          description: |
            The identifier of a vessel. The result will only return schedules including the vessel with the specified IMO number.
            
            It is not a requirement for dummy vessels to have an `IMO Number`. In this case filtering by `vesselName` should be used.
          schema:
            $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.1#/components/schemas/vesselIMONumber'
        - in: query
          name: vesselName
          description: |
            The name of a vessel. The result will only return schedules including the vessel with the specified name.
            
            Be aware that the `vesselName` is not unique and might match multiple vessels. If possible, filtering by `IMO Number` is preferred.
            
            In case of dummy vessels an `IMO Number` might not exist in which case this filter is to be used.
          schema:
            $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.1#/components/schemas/vesselName'
        - in: query
          name: carrierVoyageNumber
          description: |
            The carrier specific identifier of a `Voyage` - can be both **importVoyageNumber** and **exportVoyageNumber**. The result will only return schedules including the `Ports` where `carrierVoyageNumber` is either `carrierImportVoyageNumber` or `carrierExportVoyageNumber`
          schema:
            $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.1#/components/schemas/carrierVoyageNumber'
        - in: query
          name: universalVoyageReference
          description: |
            The Universal Reference of a `Voyage` - can be both **importUniversalVoyageReference** and **exportUniversalVoyageReference**. The result will only return schedules including the `Ports` where `universalVoyageReference` is either `importUniversalVoyageReference` or `exportUniversalVoyageReference`
          schema:
            $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.1#/components/schemas/universalVoyageReference'
        - in: query
          name: UNLocationCode
          description: |
            The `UN Location Code` specifying where a port is located.
            
            Specifying this filter will only return schedules including **entire Voyages** related to this particular `UN Location Code`.
          example: NLRTM
          schema:
            $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.1#/components/schemas/UNLocationCode'
        - in: query
          name: facilitySMDGCode
          description: |
            The `facilitySMDGCode` specifying a specific facility (using SMDG Code). Be aware that the `facilitySMDGCode` does not contain a `UNLocationCode` - this must be specified in the `UNLocationCode` filter.
            
            Specifying this filter will only return schedules including **entire Voyages** related to this particular `facilitySMDGCode`.
          example: APM
          schema:
            $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.1#/components/schemas/UNLocationCode'
        - $ref: '#/components/parameters/startDate'
        - $ref: '#/components/parameters/endDate'

        # Chunk with pagination parameters needed to be included in all APIs
        - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.1#/components/parameters/limit'
        - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.1#/components/parameters/cursor'
        - $ref: '#/components/parameters/Api-Version-Major'
      responses:
        '200':
          description: Schedule successfully posted
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/serviceSchedule'
              # examples:
              #   Sliding:   # Example 1
              #     value:
              #       id: 10
              #       name: example coming
              #   PhaseIn PhaseOut:       # Example 2
              #     value:
              #       id: 11
              #       name: example coming
        default:
          description: Unexpected error
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: 'https://api.swaggerhub.com/domains/dcsaorg/ERROR_DOMAIN/1.1.0#/components/schemas/error'

components:
  headers:
    API-Version:
      schema:
        type: string
        example: '3.0.0'
      description: SemVer used to indicate the version of the contract (API version) returned.
  parameters: 

    ##############
    # Query params
    ##############

    Api-Version-Major:
      in: header
      name: API-Version
      required: false
      schema:
        type: string
        example: '3'
      description: |
        An API-Version header MAY be added to the request (optional); if added it MUST only contain MAJOR version. API-Version header MUST be aligned with the URI version.
    endDate:
      in: query
      name: endDate
      description: |
        The end date of the period for which schedule information is requested. If a date of any Timestamp (`ATA`, `ETA` or `PTA`) inside a `PortCall` matches a date on or before (`â‰¤`) the `endDate` the **entire Voyage**(import- and export-Voyage) matching the `PortCall` will be included in the result. All matching is done towards local Date at the place of the port call.
        
        If this filter is not provided the default value is **6 months** after request time.
        
        The value is populated in `ISO 8601` date format.
      required: false
      schema:
        $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.1#/components/schemas/startDate'
    startDate:
      in: query
      name: startDate
      description: |
        The start date of the period for which schedule information is requested. If a date of any Timestamp (`ATA`, `ETA` or `PTA`) inside a `PortCall` matches a date on or after (`â‰¥`) the `startDate` the **entire Voyage** (import- and export-Voyage) matching the `PortCall` will be included in the result. All matching is done towards local Date at the place of the port call.
        
        If this filter is not provided the default value is **3 months** prior to request time.
        
        The value is populated in `ISO 8601` date format.
      required: false
      schema:
        $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.1#/components/schemas/startDate'
  schemas:
    serviceSchedule:
      type: object
      allOf:
        - type: object
          properties:
            carrierServiceName:
              allOf:
                - $ref: '#/components/schemas/carrierServiceName'
        - type: object
          properties:
            carrierServiceCode:
              allOf:
                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.1#/components/schemas/carrierServiceCode'
        - type: object
          properties:
            universalServiceReference:
              allOf:
                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.1#/components/schemas/universalServiceReference'
        - $ref: '#/components/schemas/vesselSchedules'
      required:
        - carrierServiceName
    vesselSchedules:
      type: object
      properties:
        vesselSchedules:
          type: array
          items:
            $ref: '#/components/schemas/vesselSchedule'
    vesselSchedule:
      type: object
      allOf:
        - type: object
          properties:
            vesselOperatorSMDGLinerCode:
              allOf:
                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.1#/components/schemas/vesselOperatorSMDGLinerCode'
        - type: object
          properties:
            vesselIMONumber:
              allOf:
                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.1#/components/schemas/vesselIMONumber'
        # Extends the description of VesselIMONumber
        - type: object
          properties:
            vesselIMONumber:
              description: |
                The unique reference for a registered Vessel. The reference is the International Maritime Organisation (IMO) number, also sometimes known as the Lloyd's register code, which does not change during the lifetime of the vessel
                
                **Condition**: If the vessel is not dummy, there needs to be an IMO. If the vessel is dummy, the IMO is optional. 
        - type: object
          properties:
            vesselName:
              allOf:
                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.1#/components/schemas/vesselName'
        - type: object
          properties:
            vesselCallSign:
              allOf:
                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.1#/components/schemas/vesselCallSign'
        - type: object
          properties:
            isDummyVessel:
              allOf:
                - $ref: '#/components/schemas/isDummyVessel'
        - $ref: '#/components/schemas/transportCalls'
      required:
        - vesselOperatorSMDGCode
        - isDummyVessel
    transportCalls:
      type: object
      properties:
        transportCalls:
          type: array
          items:
            $ref: '#/components/schemas/transportCall'
    transportCall:
      type: object
      description: |
        A transportCall in the schedule. A transportCall can be either just a Port or further specified as a terminalCall.
        
        The order of the list is the sequence of the list
      allOf:
        - type: object
          properties:
            portVisitReference:
              allOf:
                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.1#/components/schemas/portVisitReference'
        - type: object
          properties:
            transportCallReference:
              allOf:
                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.1#/components/schemas/transportCallReference'
        # Extends the description of TransportCall
        - type: object
          properties:
            transportCallReference:
              description: |
                The unique reference for a transport call. Itâ€™s the vessel operator responsibility to provide the Transport Call Reference, other parties are obliged to pick it up and use it. 
        - type: object
          properties:
            carrierImportVoyageNumber:
              allOf:
                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.1#/components/schemas/carrierImportVoyageNumber'
        - type: object
          properties:
            carrierExportVoyageNumber:
              allOf:
                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.1#/components/schemas/carrierExportVoyageNumber'
        - type: object
          properties:
            universalImportVoyageReference:
              allOf:
                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.1#/components/schemas/universalImportVoyageReference'
        - type: object
          properties:
            universalExportVoyageReference:
              allOf:
                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.1#/components/schemas/universalExportVoyageReference'
        - type: object
          properties:
            location:
              allOf:
                - $ref: '#/components/schemas/location'
        - type: object
          properties:
            statusCode:
              type: string
              description: |
                The set of codes in `Status Code` are ONLY meant to communicate any change / exception to the published schedule. This is not required in case of normal schedule. Possible values are:
                
                - OMIT (Omit)
                - BLNK (Blank)
                - ADHO (Ad Hoc)
                - PHOT (Phase Out)
                - PHIN (Phase In)
                - SLID (Sliding)
                - ROTC (Rotation Change)

                More details can be found on [GitHub](https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/portcallstatuscode.csv)
              enum:
                - OMIN
                - PHIN
                - PHOT
                - ADHO
                - BLNK
                - SLID
                - ROTC
              example: OMIT
        # - type: object
        #   properties:
        #     delayReasonCode:
        #       $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.1#/components/schemas/delayReasonCode'
        # - type: object
        #   properties:
        #     changeRemark:
        #       $ref: 'https://api.swaggerhub.com/domains/dcsaorg/EVENT_DOMAIN/2.0.0#/components/schemas/changeRemark'
        - $ref: '#/components/schemas/timestamps'
      required:
        - transportCallReference
        - carrierImportVoyageNumber
    timestamps:
      type: object
      properties:
        timestamps:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/timestamp'
    timestamp:
      type: object
      description: |
        A timestamp for a port
      allOf:
        - type: object
          properties:
            eventTypeCode:
              allOf:
                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/EVENT_DOMAIN/2.0.1#/components/schemas/transportEventTypeCode'
        - type: object
          properties:
            eventClassifierCode:
              allOf:
                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/EVENT_DOMAIN/2.0.1#/components/schemas/eventClassifierCode'
                - enum:
                  - ACT
                  - EST
                  - PLN
        - type: object
          properties:
            eventDateTime:
              type: string
              format: date-time
              description: |
                Time in the timstamp
              example: '2025-01-14T09:21:00+01:00'
        - type: object
          properties:
            delayReasonCode:
              allOf:
                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.1#/components/schemas/delayReasonCode'
        - type: object
          properties:
            changeRemark:
              allOf:
                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/EVENT_DOMAIN/2.0.1#/components/schemas/changeRemark'
      required:
        - eventClassifierCode
        - eventTypeCode
        - eventDateTime
    location:
      type: object
      description: |
        General purpose object to capture location-related data, the location can be specified in any of the following ways: `UN Location Code`, a `Facility` or an `Address`.
      anyOf:
        - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/LOCATION_DOMAIN/2.0.1#/components/schemas/unLocationLocation'
        - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/LOCATION_DOMAIN/2.0.1#/components/schemas/facilitySMDGLocation'
        - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/LOCATION_DOMAIN/2.0.1#/components/schemas/addressLocation'
      example:
        UNLocationCode: NLRTM
        facilitySMDGCode: RWG
    isDummyVessel:
      type: boolean
      description: |
        Is this a dummy vessel. In case no vessel has been asigned yet - this property can be set to `true` indicating that the vesselIMONumber does not exist.
    carrierServiceName:
      type: string
      maxLength: 50
      description: |
        The name of the service 
      example: Great Lion Service
